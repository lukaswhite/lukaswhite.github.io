<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Lukaswhite.com</title>
    <link>http://www.lukaswhite.com</link>
    <description>The website of Lukas White, web developer</description>
    <copyright>2013 Lukas White</copyright>
    <pubDate>Fri, 12 Sep 2014 10:04:46 +0100</pubDate>
    <item>
      <title>Taxonomy Colour: Drupal Module Development Tutorial (Part One)</title>
      <link>http://www.lukaswhite.com/blog/post/2010/taxonomy-colour-drupal-module-development-tutorial-part-one</link>
      <description>I recently developed a simple module for a project I was working on, which is so generic that it may well be useful to other people or on other projects. I was surprised to find that there was no existing module (that I could find) doing the same thing, so I wrote it myself (I’d actually inherited the project, and the person working on it had tried to achieve the same thing but by hacking part of the Drupal core – which is not a smart idea). The structure and implementation of the module was such that it seemed an ideal example to use as a tutorial in Drupal module development.

For those not familiar with the Taxonomy module, this core piece of Drupal functionality (though not enabled by default) allows you to categorise content in a number of ways – the most obvious being simple categories or tags.

The brief for this module was simple – an item of content (an event, in this case) was associated with a single category belonging to a particular vocabulary. For rendering menus and calendars, each category needed to be colour-coded – thus, I needed a way to associate a colour with a category.  

### What We’ll Cover

What makes this module a good example to use as a tutorial is that it covers a comprehensive range of areas. The module, and therefore this tutorial, will cover:

*   The basics of Drupal module development
*   The anatomy of a module
*   Creating installation profiles to modify the database
*   Interacting with the database
*   Creating a module configuration page
*   Using variables
*   Hooks
*   Using hook\_form\_alter to modify an existing form
*   Views integration
*   Caching

### Getting Started

When I’m developing a module, I prefer to start with a clean, “blank” install of Drupal – in fact I have a sandboxed installation running on my machine purely for development.  It’s such a quick and easy installation process that it’s really no hassle to do so, particularly once you start playing around with time-saving mechanisms such as installation profiles, features and the invaluable Drush.

That said, you may need to develop the module within an existing site – that’s fine, so long as you clone that site or use an existing development version.  The excellent [Backup and Migrate](http://drupal.org/project/backup_migrate) module is an invaluable tool for doing this.

### Anatomy of a Drupal module

Ok, now you’ve got Drupal running, you’ll need to create the directory structure and the first two files that make up a module.  

Your module should be a new directory in `/sites/all/modules`.  If the modules directory doesn’t already exist (it doesn’t in a clean installation), create it now. Please don’t be tempted to create your module in the top-level modules directory. This contains core Drupal modules, and will be overwritten whenever you upgrade Drupal (something you should be doing as required!).

A simple module can, as a minimum, comprise just two files. The .info file tells Drupal’s autodiscovery mechanism about the module and is therefore essential, as well as certain other information such as the version and any dependencies on other modules.

The implementation of the module itself goes in a file with the extension `.module`. This is just a PHP file – if you’re using an IDE (Integrated Development Environment) it might be worth setting it up so that it recognises a `.module` file as PHP, so you can take advantage of features such as code completion and syntax checking.

Both files have the same name, different extensions, and this name is also the name of your directory. Stick to lowercase, use only underscores, and try and keep it unique – it’s always worth checking the Drupal project pages to see if someone has already developed a module with the same name. You’ll be using this prefix a lot – by prefixing your function names with this string you’re keeping them unique, as well as adhering to certain requirements when it comes to hooks – but more on this later.

I’m going to call the module `taxonomy_color`. So, create the directory `/sites/all/modules/taxonomy_color`, and in that directory two new files: `taxonomy_color.info` and `taxonomy_color.module`.

### The .info File

As I said, the info file tells Drupal about your module.

	name = Taxonomy Color
	description = Allows colours to be assigned to taxonomy terms
	package = Other
	dependencies[] = taxonomy
	version = VERSION
	core = 6.x

Name and description will be obvious. The package is simply a logical grouping, and dictates where it appears when you go to the module listing page (admin/build/modules/list).

Dependencies references modules required for your module to operate correctly, and enabling your module without those modules being available and enabled will throw an error or request that the administrator enable them before this can be used. Because this module operates directly in conjunction with Drupal’s core Taxonomy module, I’ve added this line – note that, as previously mentioned – the Taxonomy module is not enabled by default. Note that the “name” of the module here is basically the name of the directory. This module sits in `/modules` rather than `/sites/all/modules`, since it’s part of the core.

The core directive indicates that this module is designed for the Drupal 6 branch. There are significant differences in the way modules are implemented between versions, so this is important to note.

### The Installation File

We’re going to use an installation file to set up our new table programmatically, using the `drupal_install_schema()` function within an implementation of `hook_install()`. When the module is enabled, this table is created for us and conversely, should the module be uninstalled then the process is reversed, with the table being dropped via an implementation of `hook_uninstall()` that in turn calls `drupal_uninstall_schema()`.  (Note that simply disabling the module will not cause this to be run – it has to be uninstalled. It’s common to disable modules in certain situations – such as when a module is being upgraded – when the last thing you want is to lose your data as well!)

The other task we need to carry out is to create default values for the module settings – however, since when we fetch a variable from the database we can specify a default value to use should it not have been set, the `.install` file is not necessarily the best place to do this.

Should a future version of a module require changes to the schema, using install files is the correct way to tell Drupal how to handle this.  This is outside the scope of this tutorial, so I refer you to [the documentation](http://api.drupal.org/api/drupal/developer--hooks--install.php/function/hook_update_N/6).

Here is the initial version of the install file (we’re going to add an additional table later for caching – but we’ll come to that):

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> 	* Implementation of hook_install().</span>
<span class="sd"> 	*/</span>
	<span class="k">function</span> <span class="nf">taxonomy_color_install</span><span class="p">()</span> <span class="p">{</span>
  		<span class="nv">$result</span> <span class="o">=</span> <span class="nx">drupal_install_schema</span><span class="p">(</span><span class="s1">&#39;taxonomy_color&#39;</span><span class="p">);</span>

  		<span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$result</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    		<span class="nx">drupal_set_message</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;The Taxonomy Color module was installed.&#39;</span><span class="p">));</span>
  		<span class="p">}</span>
  		<span class="k">else</span> <span class="p">{</span>
    	<span class="nx">drupal_set_message</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Taxonomy Color table creation failed. Please &amp;quot;uninstall&amp;quot; the module and retry.&#39;</span><span class="p">));</span>
  		<span class="p">}</span>
	<span class="p">}</span></code></pre></div>

Nothing too complicated here – we use an implementation of `hook_schema` to return an array-based representation of the new table, which in turn is installed – or uninstalled – in the manner described above.

Now let's look at the function that defines the table in question:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * Implementation of hook_schema().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_schema</span><span class="p">()</span> <span class="p">{</span>
  <span class="nv">$schema</span><span class="p">[</span><span class="s1">&#39;term_color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;module&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;Taxonomy Color&#39;</span><span class="p">,</span>
    <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Mapping of term to color.&#39;</span><span class="p">),</span>
    <span class="s1">&#39;fields&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">&#39;tid&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Term identifier.&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">,</span>
        <span class="s1">&#39;unsigned&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
        <span class="s1">&#39;disp-width&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="s1">&#39;color&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Hex color code.&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">,</span>
        <span class="s1">&#39;length&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">),</span>
      <span class="p">),</span>
    <span class="s1">&#39;primary key&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;tid&#39;</span><span class="p">),</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="nv">$schema</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

So, when you install the module, you should find – have a look using phpMyAdmin or similar – that you have a new table specifically for this module. Finally, we add an instruction that tells Drupal to remove this table when the module is uninstalled;

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * Implementation of hook_uninstall().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_uninstall</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">drupal_uninstall_schema</span><span class="p">(</span><span class="s1">&#39;taxonomy_color&#39;</span><span class="p">);</span>  
<span class="p">}</span></code></pre></div>

I say finally – let's just throw in another table, which we'll use later; we'll do so by modifying our implementation of `hook_schema()` above.

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd">	 * Implementation of hook_schema().</span>
<span class="sd">	 */</span>
  <span class="k">function</span> <span class="nf">taxonomy_color_schema</span><span class="p">()</span> <span class="p">{</span>
		<span class="nv">$schema</span><span class="p">[</span><span class="s1">&#39;term_color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">&#39;module&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;Taxonomy Color&#39;</span><span class="p">,</span>
      <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Mapping of term to color.&#39;</span><span class="p">),</span>
      <span class="s1">&#39;fields&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;tid&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
          <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Term identifier.&#39;</span><span class="p">),</span>
          <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">,</span>
          <span class="s1">&#39;unsigned&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
          <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
          <span class="s1">&#39;disp-width&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;10&#39;</span><span class="p">,</span>
          <span class="p">),</span>
        <span class="s1">&#39;color&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
          <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Hex color code.&#39;</span><span class="p">),</span>
          <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">,</span>
          <span class="s1">&#39;length&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span>
          <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">),</span>
        <span class="p">),</span>
      <span class="s1">&#39;primary key&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;tid&#39;</span><span class="p">),</span>
      <span class="p">);</span>

    <span class="nv">$schema</span><span class="p">[</span><span class="s1">&#39;cache_tax_color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
    	<span class="s1">&#39;module&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;Taxonomy Color&#39;</span><span class="p">,</span>
    	<span class="s1">&#39;fields&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
      		<span class="s1">&#39;cid&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        	<span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Primary Key: Unique cache ID.&#39;</span><span class="p">),</span>
        	<span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;varchar&#39;</span><span class="p">,</span>
        	<span class="s1">&#39;length&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">255</span><span class="p">,</span>
        	<span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
        <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
      <span class="s1">&#39;data&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;A collection of data to cache.&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;blob&#39;</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">FALSE</span><span class="p">,</span>
        <span class="s1">&#39;size&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;big&#39;</span><span class="p">),</span>
      <span class="s1">&#39;expire&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;A Unix timestamp indicating when the cache entry should expire, or 0 for never.&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
        <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">),</span>
      <span class="s1">&#39;created&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;A Unix timestamp indicating when the cache entry was created.&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
        <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">),</span>
      <span class="s1">&#39;headers&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Any custom HTTP headers to be added to cached data.&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">FALSE</span><span class="p">),</span>
      <span class="s1">&#39;serialized&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;A flag to indicate whether content is serialized (1) or not (0).&#39;</span><span class="p">),</span>
        <span class="s1">&#39;type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;int&#39;</span><span class="p">,</span>
        <span class="s1">&#39;size&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;small&#39;</span><span class="p">,</span>
        <span class="s1">&#39;not null&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
        <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">),</span>
    <span class="s1">&#39;indexes&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;expire&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;expire&#39;</span><span class="p">)),</span>
    <span class="s1">&#39;primary key&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;cid&#39;</span><span class="p">),</span>
    <span class="p">);</span>

    <span class="k">return</span> <span class="nv">$schema</span><span class="p">;</span>
  <span class="p">}</span></code></pre></div>
   
In the next part of this tutorial, we’ll get started on the module itself, starting with interacting with the database.

</description>
      <pubDate>Mon, 24 May 2010 10:04:46 +0100</pubDate>
      <dc:date>2010-05-24T10:04:46+01:00</dc:date>
    </item>
    <item>
      <title>Responsive Web Design and Media Queries: Not The Silver Bullet</title>
      <link>http://www.lukaswhite.com/blog/post/2010/responsive-web-design-and-media-queries-not-silver-bullet</link>
      <description>There's certainly a big buzz right now about responsive web design; flexible layouts that adapt dynamically to the user's device and its capabilities; screen size, resolution and so on. One of the major uses for this technique - a combination of flexible grids, resizeable images and CSS media queries - is as a mechanism for creating a mobile version of a site. And it's a very useful approach - dynamically changing the layout according to your device's capabilities enables content to be re-structured for the small screen with little effort. Also, putting the onus on the device to interpret the style rules makes sense, removing the need for messy, server-side browser detection based on user agent strings. However as tempting as it might be to use this technique as your sole approach to mobile-enabling a site, it is to ignore a number of other factors and issues prevalent in designing - and building - for the mobile web. Displaying a website in such a way that it looks better on a mobile device is only a part of the process for creating a mobile version; there are other factors which should be considered, such as how and where the mobile version of the site is going to be used, a user's motivation for using the site and assessing what is appropriate for the mobile-friendly version of the site. Whilst it is true that some people will only ever visit your site from a mobile device, it is likely to be used differently and should be tailored as such - it's not just about making it look right on a small screen. For example if I'm accessing the RAC website via my mobile, it's much more likely I'm doing so for breakdown assistance or real-time traffic information, than researching my options for car insurance. Interfaces need to be considered carefully on a mobile site; it's not just about styling. If I visit a website for a cinema chain I'd expect something like a drop-down where I can select the cinema I'm interested in; on their mobile site they'd be missing a trick if they didn't use geo-location to save me time. My second argument is more pragmatic and technical. Take the simple example of a blog, with a typical two column layout - using media queries, the right-hand column might be shifted below the main content area (i.e. the articles). Or perhaps the tertiary nature of a typical right-hand column means it can be stripped out altogether. However this creates two major inefficiencies - the HTML is fetched from the server and never used, and typically-dynamic content, whilst most probably cached, still has to be generated from somewhere and it seems illogical to generate something which doesn't ever get seen. Responsive web design calls for images to be resized by the device; but by this time the full-size image has been downloaded (at least on iPhones) - a significant inefficiency, and bad news if you're on an old mobile network. Even Apple themselves advise not to [rely on this technique](http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/CreatingContentforSafarioniPhone/CreatingContentforSafarioniPhone.html#//apple_ref/doc/uid/TP40006482-SW1). Better to use servcer-side resizing or a web service such as [tinySrc](http://tinysrc.net/). The solution? Use media queries to fine-tune the display of a mobile version of a site, not just realign or tweak the content of a desktop website. Implement a separate strategy for the mobile version, and use server-side technology to cherry pick the required content and elements, and present this using an alternative theme layer. (Ensuring, of course, that the desktop version is available if required.) Take advantage of features that work well on mobile devices such as geo-location. I do support media queries in responsive web design to help enhance the mobile experience. If you've got a simple site and want it to work okay on mobile device, go for it. But blindly assuming that they can be used alone to create a rich user experience on mobile devices is a little short-sighted.

</description>
      <pubDate>Sun, 19 Sep 2010 16:40:28 +0100</pubDate>
      <dc:date>2010-09-19T16:40:28+01:00</dc:date>
    </item>
    <item>
      <title>A Drupal Pre-Launch Checklist</title>
      <link>http://www.lukaswhite.com/blog/post/2011/drupal-pre-launch-checklist</link>
      <description>There are numerous steps you should complete before launching a new website; cross-browser testing, checking for dead links, proof-reading. These are covered more than adequately elsewhere but in this article I’m going to look at a number of steps applicable specifically to launching a Drupal site. You may not agree with them all, but then none of the following are compulsory – these are just my personal recommendations.

</description>
      <pubDate>Fri, 03 Jun 2011 10:01:07 +0100</pubDate>
      <dc:date>2011-06-03T10:01:07+01:00</dc:date>
    </item>
    <item>
      <title>Pop-overs on Mobile Websites</title>
      <link>http://www.lukaswhite.com/blog/post/2011/pop-overs-mobile-websites</link>
      <description>This morning a Tweet piqued my interest; “FT.com launches subscription web app aimed at Smartphone &amp; tablet users bypassing app store tariffs”. An interesting concept, so I followed the link which took me straight to the FT.com website. Now, if there’s anything that’s going to drive me away from a website it's a pop-over – except, that is, a pop-over when I just happen to be trying to access your site using my mobile. This is what I got: 

</description>
      <pubDate>Tue, 07 Jun 2011 17:30:52 +0100</pubDate>
      <dc:date>2011-06-07T17:30:52+01:00</dc:date>
    </item>
    <item>
      <title>Creating a Mobile Drupal Website with Mobile Tools, Nokia Mobile and Browscap - Part One</title>
      <link>http://www.lukaswhite.com/blog/post/2011/creating-mobile-drupal-website-mobile-tools-nokia-mobile-and-browscap-part-one</link>
      <description>With a few handy contributed modules, creating a mobile version of a Drupal website can be surprisingly painless. In this series of posts, I’ll run through one approach for doing so, using a few of those modules and themes.

</description>
      <pubDate>Wed, 08 Jun 2011 13:59:54 +0100</pubDate>
      <dc:date>2011-06-08T13:59:54+01:00</dc:date>
    </item>
    <item>
      <title>Drupal Module Updates via iPhone Push Notifications</title>
      <link>http://www.lukaswhite.com/blog/post/2011/drupal-module-updates-iphone-push-notifications</link>
      <description>If you’ve looked after a Drupal website for any length of time you’ll know that you should regularly update modules, themes and most importantly the Drupal core as-and-when updates become available – security updates, at the very least. The Update Status module (now in core) is great for summarising what needs updating (if you haven’t enabled that module, you really should do), but if you really want to stay on top of those updates then there’s a fairly simple way in which you can get them sent to your iPhone (or indeed iPad) as a push notification. Here’s how. First, you’ll need to [download Prowl from the App Store](http://itunes.apple.com/app/prowl-growl-client/id320876271?mt=8) – at the time of writing it costs £1.79, or $2.99 in the US. Next up, you’ll need to create an account on the [Prowl website](http://www.prowlapp.com/). Then, you will need to generate an API key – you can create as many of these as you wish, and there’s no additional charge for doing so. As you can see from the screenshot below, the *API Keys* tab shows any existing keys, and the form at the bottom is used to create a new one – all you need is a note to remind yourself what it’s for. Enter something to do with the site you’re adding, e.g. “My Drupal Website” and hit *Generate Key* 

</description>
      <pubDate>Mon, 13 Jun 2011 00:05:04 +0100</pubDate>
      <dc:date>2011-06-13T00:05:04+01:00</dc:date>
    </item>
    <item>
      <title>Granting Ad-hoc Access to Drupal Content (Nodes)</title>
      <link>http://www.lukaswhite.com/blog/post/2011/granting-ad-hoc-access-drupal-content-nodes</link>
      <description>Drupal’s permissions system provides sufficient flexibility to create an Editor role or similar, enabling a site user to review or optionally edit content prior to publication. But what if you simply want to allow someone to view unpublished content on an ad-hoc basis – perhaps you wish to get a colleague to look over a new blog post, for example – without having to create a role, or you simply wish to restrict it to one particular item of (unpublished) content? Step forward [Peek](http://drupal.org/project/peek), which allows you to do just that. Simply designate a content type “peekable”, then depending on the settings per-content type, set your node as “peekable” too. You can then grant a “peek” – a window of time during which a specified user can, by following a special link, gain read-only access to that node. You can configure an expiry time, the length of time it’s valid for and opt to be notified when the content is accessed. It’s a great little module.

</description>
      <pubDate>Thu, 16 Jun 2011 11:41:14 +0100</pubDate>
      <dc:date>2011-06-16T11:41:14+01:00</dc:date>
    </item>
    <item>
      <title>A Look at the Concrete5 CMS</title>
      <link>http://www.lukaswhite.com/blog/post/2011/concrete5-cms-review-concrete5-vs-drupal</link>
      <description>There are so many Content Management Systems (&lt;abbr title=&quot;Content Management System&quot;&gt;CMS&lt;/abbr&gt;’s) out there that due to the sheer volume of choice it’s easy to plump for the best known options, such as [Drupal](/blog/categories/drupal), Joomla! and Wordpress. However there are times when these “flagship” CMS’s might not be the best option. Drupal, for example, can be overly complex and bloated for fairly simple websites (personally I’ve often thought of it more as a framework anyway), or Wordpress might be too specific for a site that’s not strictly a blog. I’ve long wanted a good, easy-to-use, stripped-down but extensible – alternative, and one such option I’ve looked at recently is [Concrete5](http://www.concrete5.org/). Concrete5 has gone from being a commercial product to [MIT-licensed](http://www.concrete5.org/help/legal/concrete5_mit/) Open Source and makes some pretty bold claims about being easier-to-use and better coded [than Drupal or Joomla](http://www.cmscritic.com/concrete5-founder-franz-maruna-interview/). But does it live up to these lofty ambitions? And how does it compare to Drupal, Joomla and so on? 

</description>
      <pubDate>Tue, 28 Jun 2011 12:41:44 +0100</pubDate>
      <dc:date>2011-06-28T12:41:44+01:00</dc:date>
    </item>
    <item>
      <title>Taxonomy Colour: Drupal Module Development Tutorial (Part Two)</title>
      <link>http://www.lukaswhite.com/blog/post/2011/taxonomy-colour-drupal-module-development-tutorial-part-two</link>
      <description>In the [first part](/blog/post/2010/taxonomy-colour-drupal-module-development-tutorial-part-one), I looked at creating the database schema for a simple Drupal module designed to allow you to associate colours with taxonomy terms. In this second part, I’ll look at the administration aspects of the module. In essence, what we need to do is as follows: 

*   Since colour-coding may only be appropriate to certain vocabularies (e.g. categories) and not others (tags, perhaps). We need to provide the user with the option to specify which vocabularies are applicable.
*   The user needs to be able to specify a colour when adding or editing a term, where appropriate.
*   We need to provide a mechanism which allows the colour associated with a term to be stored, retrieved, and to be displayed. 

Later, I’m going to want to incorporate the colour in views, as well as consider some performance aspects. The next thing, then, is to start coding the module and this will take place in the PHP file we created in part one, `taxonomy_color.module`. 

### Introducing hook\_form\_alter 

To allow the option to categorise terms on a per-vocabulary basis, we'll add a checkbox to the edit vocabulary form (which is also used to add a new vocabulary). We achieve this by harnessing the power of `hook_form_alter`. In order to intercept the form and add this checkbox, we need to create a method whose name matches the signature `hook_form_FORM_ID_alter`. The first part of this tutorial introduced hooks, and I introduced the idea that the the `hook` part should be replaced by the ID of the module, thus: `taxonomy_color_form_FORM_ID_alter`. To find our form ID, the easiest way is to get the form on screen by navigating to the relevant page (in this case, go and edit an existing term), **view source** and check the ID of the `form` tag: 

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>form action=<span class="ni">&amp;quot;</span>/admin/content/taxonomy/edit/vocabulary/1<span class="ni">&amp;quot;</span>  accept-charset=<span class="ni">&amp;quot;</span>UTF-8<span class="ni">&amp;quot;</span> method=<span class="ni">&amp;quot;</span>post<span class="ni">&amp;quot;</span> id=<span class="ni">&amp;quot;</span>taxonomy-form-vocabulary<span class="ni">&amp;quot;&amp;gt;</span></code></pre></div>

You’ll see that this is `taxonomy-form-vocabulary` – we must then, however, get rid of those dashes and replace them with underscores, i.e. `taxonomy_form_vocabulary` – so the method name becomes: `taxonomy_color_form_taxonomy_form_vocabulary_alter` Quite a mouthful, huh? This mechanism for determining your function name might seem unwieldy and complicated, but you soon get the hang of it. Consulting the [documentation](http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_form_FORM_ID_alter/6) / source for `hook_form_FORM_ID_alter` shows that the method should look like this:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * Implementation of hook_form_FORM_ID_alter().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_form_taxonomy_form_vocabulary_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$form</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$form_state</span><span class="p">)</span> <span class="p">{</span>
 <span class="c1">// implementation goes here</span>
<span class="p">}</span></code></pre></div>

So, let's start implementing the function by adding the form element.

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
          <span class="s1">&#39;#type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;checkbox&#39;</span><span class="p">,</span>
          <span class="s1">&#39;#title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Use colour-coding&#39;</span><span class="p">),</span>
          <span class="s1">&#39;#default_value&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$checked</span><span class="p">,</span>      
        <span class="p">);</span></code></pre></div>

Once you’ve added this new element, the form should look something like the figure below: 

&lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt; &lt;img src=&quot;/images/blogs/2011/taxonomy/taxonomy-color-vocab-form-1.png&quot; width=&quot;580&quot; height=&quot;400&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;The Add / Edit Vocabulary form, after we've added a new checkbox (“Use colour-coding”)&lt;/figcaption&gt;&lt;/figure&gt; 

You’ll probably notice a minor issue immediately – the new element sits below the *Save* (i.e. the submit) and *Delete* buttons. Whilst the form is still fully functional, it’ not ideal from a usability point-of-view. In order to fix this we juggle the weights, which control the order in which elements appear within a form. Let’s first set the weight – configured as an element of the array that represents the element – to a high number, thus:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;#type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;checkbox&#39;</span><span class="p">,</span>
    <span class="s1">&#39;#title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Use colour-coding&#39;</span><span class="p">),</span>
    <span class="s1">&#39;#default_value&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$checked</span><span class="p">,</span>      
    <span class="s1">&#39;#weight&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">999</span><span class="p">,</span> 
  <span class="p">);</span></code></pre></div>

And then change the weights of the *Save* (the submit) and *Delete* buttons to greater values (the greater the value, the further down the form the element will appear), thus:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;submit&#39;</span><span class="p">][</span><span class="s1">&#39;#weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;delete&#39;</span><span class="p">][</span><span class="s1">&#39;#weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1001</span><span class="p">;</span></code></pre></div>

The form should now be re-ordered, as illustrated by the figure below: 

&lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt; &lt;img src=&quot;/images/blogs/2011/taxonomy/taxonomy-color-vocab-form-2.png&quot; width=&quot;580&quot; height=&quot;170&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;The amended form, now we’ve juggled the weights around&lt;/figcaption&gt;&lt;/figure&gt; 

I won’t go into the mechanics of the Drupal Form API – you may wish to refer to the [Form API Quickstart Guide](http://drupal.org/node/751826) – but we're basically adding a new element called *color*, which is a checkbox with the given caption (the `t()` function – which stands for translate – allows us to localise our titles and messages). Now, the other element which so far I’ve just skimmed over - the `default_value` element. In truth this is probably easier to think of as an *initial* value; when adding a new vocabulary it’s a default value but when editing it’s the *current* value. But before we can set this value, we need to decide where it’ going to get stored. 

### Using Variables in Drupal 

Creating a table to hold these values is probably overkill, however Drupal provides simple key-value storage via the `variable` system, so that’s what we'll do. What I’m going to do, then, is simply have a variable for each vocabulary indicating whether to apply a colour scheme or not. Sticking with the convention of prefixing everything with the module name to ensure it’s unique, I’ve stumped for taxonomy\_color\_color\_vocab\_*vid*, where *vid* is the vocabulary ID. So the value of `$default` is determined as follows:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;vid&#39;</span><span class="p">][</span><span class="s1">&#39;#value&#39;</span><span class="p">]))</span> <span class="p">{</span>
		<span class="nv">$checked</span> <span class="o">=</span> <span class="nx">variable_get</span><span class="p">(</span><span class="s1">&#39;taxonomy_color_color_vocab_&#39;</span><span class="o">.</span><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;vid&#39;</span><span class="p">][</span><span class="s1">&#39;#value&#39;</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nv">$checked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span></code></pre></div>

If we’re editing a vocabulary (rather than adding), the vid is stored in `$form['vid']['#value']` – do a `var_dump()` to see this – so in the first case, we find out the current value for the given vocabulary, first appending the vid to the key. The second argument to the function `variable_get` specifies the value to return if the key in question doesn't have a value – 0 (false) seems a sensible default. If the vid isn’t set then it– a new vocabulary, so let’ set it to false. 

### Using hook_taxonomy 

Next up, this value needs to be stored at the appropriate time – in this case when the form gets submitted; however there’s a trick we can use to “hook in” to this part of the process; when a vocabulary is inserted or updated. We’re going to use another hook – `hook_taxonomy()`:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * Implementation of hook_taxonomy().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_taxonomy</span><span class="p">(</span><span class="nv">$op</span><span class="p">,</span> <span class="nv">$type</span><span class="p">,</span> <span class="nv">$form_values</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">)</span> <span class="p">{</span></code></pre></div>

This function gets called when inserting, updating or deleting a vocabulary or a term. `$op` indicates the operation (*insert*, *update* or *delete*), and the second argument – `$type` – indicates whether the entity in question is either a *term* or *vocabulary*. Here’s the implementation:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">switch</span> <span class="p">(</span><span class="nv">$type</span><span class="p">)</span> <span class="p">{</span>
		
		<span class="k">case</span> <span class="s1">&#39;vocabulary&#39;</span><span class="o">:</span>
			<span class="k">switch</span> <span class="p">(</span><span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">case</span> <span class="s1">&#39;insert&#39;</span><span class="o">:</span>
				<span class="k">case</span> <span class="s1">&#39;update&#39;</span><span class="o">:</span>
					<span class="nx">variable_set</span><span class="p">(</span><span class="s1">&#39;taxonomy_color_color_vocab_&#39;</span><span class="o">.</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;vid&#39;</span><span class="p">],</span> <span class="nb">intval</span><span class="p">(</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]));</span>
			        <span class="k">break</span><span class="p">;</span>
				<span class="k">case</span> <span class="s1">&#39;delete&#39;</span><span class="o">:</span>
					<span class="nx">variable_del</span><span class="p">(</span><span class="s1">&#39;taxonomy_color_color_vocab_&#39;</span><span class="o">.</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;vid&#39;</span><span class="p">]);</span>
			        <span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
			
			<span class="k">break</span><span class="p">;</span></code></pre></div>

We’re interested in vocabularies right now - but we'll use a `switch` here because in a moment, we’ll be looking at terms. Another `switch` decides what to do based on the operation; setting the variable we defined previously on an insert or an update, and if we’re deleting a vocabulary then let’s keep things tidy by deleting the corresponding variable. 

### Assigning Colour to Taxonomy Terms 

Next up, we need to add the option to specify a colour for a given taxonomy term by adding a new field to the term edit form. Again, we achieve this using `hook_form_alter`, adding a new fieldset containing a textfield. Ideally we’d probably want to use JQuery to transform this element into a colour picker, but that’s outside the scope of this tutorial. So, once again we have a look at the form to get the form ID:

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>form action=<span class="ni">&amp;quot;</span>/admin/content/taxonomy/edit/term/123<span class="ni">&amp;quot;</span>  accept-charset=<span class="ni">&amp;quot;</span>UTF-8<span class="ni">&amp;quot;</span> method=<span class="ni">&amp;quot;</span>post<span class="ni">&amp;quot;</span> id=<span class="ni">&amp;quot;</span>taxonomy-form-term<span class="ni">&amp;quot;</span> enctype=<span class="ni">&amp;quot;</span>multipart/form-data<span class="ni">&amp;quot;&amp;gt;</span></code></pre></div>

So by applying the same logic as before, our function name becomes: `taxonomy_color_form_taxonomy_form_term_alter` By inspecting the form we can see that the term ID (tid) is stored in `$form['tid']['#value']`, so we can check for a colour associated with that term ID, otherwise defaulting to black (hex 000000). This is shown in the snippet below.

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$tid</span> <span class="o">=</span> <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">][</span><span class="s1">&#39;#value&#39;</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$tid</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">taxonomy_color_get_term_color</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$color</span> <span class="o">=</span> <span class="s1">&#39;000000&#39;</span><span class="p">;</span>
  <span class="p">}</span></code></pre></div>

You’ll probably notice immediately that I’ve called a function which I haven’t yet defined; its purpose should be self explanatory. Let’s dive in:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">taxonomy_color_get_term_color</span><span class="p">(</span><span class="nv">$tid</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$result</span> <span class="o">=</span> <span class="nx">db_fetch_object</span><span class="p">(</span><span class="nx">db_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">SELECT</span> <span class="nx">color</span> <span class="nx">FROM</span> <span class="p">{</span><span class="nx">term_color</span><span class="p">}</span> <span class="nx">WHERE</span> <span class="nx">tid</span> <span class="o">=</span> <span class="s1">&#39;%d&#39;</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="nv">$tid</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$result</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$result</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">NULL</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>

The SQL should be fairly clear; we run that query, substituting the provided term ID (tid) and fetch the result as an object. The `db_query` function provides an API to our database. Note that the table name is wrapped in curly braces; if a table prefix was allocated upon installation, this will be inserted for us – it’s not safe to just assume the table is called `term_color`. And here is the rest of `taxonomy_color_form_taxonomy_form_term_alter`

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * Implementation of hook_form_FORM_ID_alter().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_form_taxonomy_form_term_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$form</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$form_state</span><span class="p">)</span> <span class="p">{</span>
<span class="nv">$vid</span> <span class="o">=</span> <span class="nb">intval</span><span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#vocabulary&#39;</span><span class="p">][</span><span class="s1">&#39;vid&#39;</span><span class="p">]);</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="nx">variable_get</span><span class="p">(</span><span class="s1">&#39;taxonomy_color_color_vocab_&#39;</span><span class="o">.</span><span class="nv">$vid</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>  
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;submit&#39;</span><span class="p">][</span><span class="s1">&#39;#weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;delete&#39;</span><span class="p">][</span><span class="s1">&#39;#weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  
  <span class="nv">$tid</span> <span class="o">=</span> <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">][</span><span class="s1">&#39;#value&#39;</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$tid</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">taxonomy_color_get_term_color</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$color</span> <span class="o">=</span> <span class="s1">&#39;000000&#39;</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;extras&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;#type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;fieldset&#39;</span><span class="p">,</span>
    <span class="s1">&#39;#title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Extras&#39;</span><span class="p">),</span>
    <span class="s1">&#39;#collapsible&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
  <span class="p">);</span>
    
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;extras&#39;</span><span class="p">][</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span><span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;#type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
    <span class="s1">&#39;#title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Color&#39;</span><span class="p">),</span>
    <span class="s1">&#39;#size&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>  <span class="mi">6</span><span class="p">,</span>
    <span class="s1">&#39;#default_value&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$color</span><span class="p">,</span>
    <span class="s1">&#39;#description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;The Color that represents this term.&#39;</span><span class="p">),</span>
  <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>

Note that before we modify the form, we check whether the vocabulary of this term uses colour-coding; whether editing or adding a brand new term the vocabulary is, by design, already specified and is stored in `$form['#vocabulary']['vid']` so we use this to check the value of the relevant variable. 

### Using the Database in Drupal 

So, that’s the form modified, but we still need to store the colour in the table we created. Here we’ll go back to our implementation of `hook_taxonomy()`, and add a clause to the `switch` statement to pick up on term changes.

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">taxonomy_color_taxonomy</span><span class="p">(</span><span class="nv">$op</span><span class="p">,</span> <span class="nv">$type</span><span class="p">,</span> <span class="nv">$form_values</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">)</span> <span class="p">{</span>
  <span class="o">...</span>
  <span class="k">case</span> <span class="s1">&#39;term&#39;</span><span class="o">:</span>
<span class="sb">` If the form contains a term ID (tid), we check the operation being performed, which is stored in `</span><span class="nv">$op</span><span class="sb">`. The function continues as follows: `</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="c1">// grab the tid  </span>
    <span class="nv">$tid</span> <span class="o">=</span> <span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">];</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
<span class="sb">` If the term is being inserted or updated, `</span><span class="nv">$op</span><span class="sb">` will be **insert** or **update** respectively, but we’ll handle them with the same function: `</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="s1">&#39;insert&#39;</span><span class="o">:</span>
      <span class="k">case</span> <span class="s1">&#39;update&#39;</span><span class="o">:</span>
        <span class="c1">// if we&#39;re inserting or updating, set the color</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]))</span> <span class="p">{</span>
          <span class="nx">taxonomy_color_add</span><span class="p">(</span><span class="nv">$tid</span><span class="p">,</span> <span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]);</span>
        <span class="p">}</span>        
        <span class="k">break</span><span class="p">;</span>
<span class="sb">` There’s a new function here – `</span><span class="nx">taxonomy_color_add</span><span class="sb">` – but let’s just finish this function before addressing that: `</span>
      <span class="k">case</span> <span class="s1">&#39;delete&#39;</span><span class="o">:</span>
        <span class="c1">// delete the appropriate row in term_color</span>
        <span class="nx">taxonomy_color_delete</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span></code></pre></div>

So as you can see, the next step is to define functions to add / update / delete a colour for a given term. Deleting is easy:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * Delete the color associated with a given term</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_delete</span><span class="p">(</span><span class="nv">$tid</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">db_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">DELETE</span> <span class="nx">FROM</span> <span class="p">{</span><span class="nx">term_color</span><span class="p">}</span> <span class="nx">WHERE</span> <span class="nx">tid</span><span class="o">=</span><span class="s1">&#39;%d&#39;</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="nv">$tid</span><span class="p">);</span>
<span class="p">}</span>
<span class="sb">` It might appear that I&#39;m making adding a colour for a given term more complicated than it needs to be, by deleting a record and inserting a new one instead of updating; however by doing it this way I’m keeping on top of enforcing the integrity of the cache, a new aspect to the module which you’ll see being introduced in this function: `</span>
<span class="k">function</span> <span class="nf">taxonomy_color_add</span><span class="p">(</span><span class="nv">$tid</span><span class="p">,</span> <span class="nv">$color</span><span class="p">)</span> <span class="p">{</span>

  <span class="nv">$count</span> <span class="o">=</span> <span class="nx">db_result</span><span class="p">(</span><span class="nx">db_query</span><span class="p">(</span><span class="s1">&#39;SELECT COUNT(tid) FROM {term_color} WHERE tid=%d&#39;</span><span class="p">,</span> <span class="nv">$tid</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="nv">$count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Delete old color before saving the new one.</span>
    <span class="nx">taxonomy_color_delete</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">db_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="p">{</span><span class="nx">term_color</span><span class="p">}</span> <span class="p">(</span><span class="nx">tid</span><span class="p">,</span> <span class="nx">color</span><span class="p">)</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="s1">&#39;%d&#39;</span><span class="p">,</span> <span class="s1">&#39;%s&#39;</span><span class="p">)</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="nv">$tid</span><span class="p">,</span> <span class="nv">$color</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">cache_clear_all</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">taxonomy_color</span><span class="o">:</span><span class="nv">$tid</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="s1">&#39;cache_tax_color&#39;</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">TRUE</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">FALSE</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></div>

As you can see, when we delete a colour held against a term and add a new one, we clear any record for this term from the cache, where the key is `taxonomy_color:tid`. The second parameter of the call to `cache_clear_all` is the name of the table used to store the cached data. Note that I could / should use `drupal_write_record` here, but I’m going to keep it simple for now. 

### The Module (so far) in Full 

Below, you’ll find the module in full, at least up until this point. 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="sd">/**</span>
<span class="sd"> * @file</span>
<span class="sd"> * Enables colors to be assigned to taxonomy</span>
<span class="sd"> *</span>
<span class="sd"> * @author Lukas White &amp;lt;hello@lukaswhite.com&amp;gt;</span>
<span class="sd"> */</span>

<span class="sd">/**</span>
<span class="sd"> * Implementation of hook_perm().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_perm</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;administer taxonomy&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Implementation of hook_form_FORM_ID_alter().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_form_taxonomy_form_term_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$form</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nv">$form_state</span><span class="p">)</span> <span class="p">{</span>
  
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;submit&#39;</span><span class="p">][</span><span class="s1">&#39;#weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;delete&#39;</span><span class="p">][</span><span class="s1">&#39;#weight&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
  
  <span class="nv">$tid</span> <span class="o">=</span> <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">][</span><span class="s1">&#39;#value&#39;</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$tid</span><span class="p">))</span> <span class="p">{</span>
    <span class="nv">$color</span> <span class="o">=</span> <span class="nx">taxonomy_color_get_term_color</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$color</span> <span class="o">=</span> <span class="s1">&#39;000000&#39;</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;extras&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;#type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;fieldset&#39;</span><span class="p">,</span>
    <span class="s1">&#39;#title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Extras&#39;</span><span class="p">),</span>
    <span class="s1">&#39;#collapsible&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">TRUE</span><span class="p">,</span>
  <span class="p">);</span>
    
  <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;extras&#39;</span><span class="p">][</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span><span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;#type&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;textfield&#39;</span><span class="p">,</span>
    <span class="s1">&#39;#title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Color&#39;</span><span class="p">),</span>
    <span class="s1">&#39;#size&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>  <span class="mi">6</span><span class="p">,</span>
    <span class="s1">&#39;#default_value&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$color</span><span class="p">,</span>
    <span class="s1">&#39;#description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;The Color that represents this term.&#39;</span><span class="p">),</span>
  <span class="p">);</span>
  
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Implementation of hook_taxonomy().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_taxonomy</span><span class="p">(</span><span class="nv">$op</span><span class="p">,</span> <span class="nv">$type</span><span class="p">,</span> <span class="nv">$form_values</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// We&#39;re only interested in term changes.</span>
  <span class="k">if</span> <span class="p">(</span><span class="nv">$type</span> <span class="o">!=</span> <span class="s1">&#39;term&#39;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="c1">// grab the tid  </span>
    <span class="nv">$tid</span> <span class="o">=</span> <span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;tid&#39;</span><span class="p">];</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nv">$op</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="s1">&#39;insert&#39;</span><span class="o">:</span>
      <span class="k">case</span> <span class="s1">&#39;update&#39;</span><span class="o">:</span>
        <span class="c1">// if we&#39;re inserting or updating, set the color</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]))</span> <span class="p">{</span>
          <span class="nx">taxonomy_color_add</span><span class="p">(</span><span class="nv">$tid</span><span class="p">,</span> <span class="nv">$form_values</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]);</span>
        <span class="p">}</span>        
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="s1">&#39;delete&#39;</span><span class="o">:</span>
        <span class="c1">// delete the appropriate row in term_color</span>
        <span class="nx">taxonomy_color_delete</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Helper function for adding a colour to a term</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_add</span><span class="p">(</span><span class="nv">$tid</span><span class="p">,</span> <span class="nv">$color</span><span class="p">)</span> <span class="p">{</span>

  <span class="nv">$count</span> <span class="o">=</span> <span class="nx">db_result</span><span class="p">(</span><span class="nx">db_query</span><span class="p">(</span><span class="s1">&#39;SELECT COUNT(tid) FROM {term_color} WHERE tid=%d&#39;</span><span class="p">,</span> <span class="nv">$tid</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="nv">$count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Delete old color before saving the new one.</span>
    <span class="nx">taxonomy_color_delete</span><span class="p">(</span><span class="nv">$tid</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">db_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="p">{</span><span class="nx">term_color</span><span class="p">}</span> <span class="p">(</span><span class="nx">tid</span><span class="p">,</span> <span class="nx">color</span><span class="p">)</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="s1">&#39;%d&#39;</span><span class="p">,</span> <span class="s1">&#39;%s&#39;</span><span class="p">)</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="nv">$tid</span><span class="p">,</span> <span class="nv">$color</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">cache_clear_all</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">taxonomy_color</span><span class="o">:</span><span class="nv">$tid</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="s1">&#39;cache_tax_color&#39;</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">TRUE</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">FALSE</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">taxonomy_color_get_term_color</span><span class="p">(</span><span class="nv">$tid</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$result</span> <span class="o">=</span> <span class="nx">db_fetch_object</span><span class="p">(</span><span class="nx">db_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">SELECT</span> <span class="nx">color</span> <span class="nx">FROM</span> <span class="p">{</span><span class="nx">term_color</span><span class="p">}</span> <span class="nx">WHERE</span> <span class="nx">tid</span> <span class="o">=</span> <span class="s1">&#39;%d&#39;</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="nv">$tid</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$result</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$result</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">color</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Delete the color associated with a given term</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_delete</span><span class="p">(</span><span class="nv">$tid</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">db_query</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">DELETE</span> <span class="nx">FROM</span> <span class="p">{</span><span class="nx">term_color</span><span class="p">}</span> <span class="nx">WHERE</span> <span class="nx">tid</span><span class="o">=</span><span class="s1">&#39;%d&#39;</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span> <span class="nv">$tid</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> *  Implementation of hook_flush_caches().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_flush_caches</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;cache_tax_color&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> *  Implementation of hook_views_api().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_views_api</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;api&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s1">&#39;path&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">drupal_get_path</span><span class="p">(</span><span class="s1">&#39;module&#39;</span><span class="p">,</span> <span class="s1">&#39;taxonomy_color&#39;</span><span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> *  Implementation of hook_views_handlers().</span>
<span class="sd"> */</span>
<span class="k">function</span> <span class="nf">taxonomy_color_views_handlers</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;info&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">&#39;path&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">drupal_get_path</span><span class="p">(</span><span class="s1">&#39;module&#39;</span><span class="p">,</span> <span class="s1">&#39;taxonomy_color&#39;</span><span class="p">),</span>
      <span class="p">),</span>
    <span class="s1">&#39;handlers&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
      <span class="s1">&#39;views_handler_field_taxonomy_color&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;parent&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;views_handler_field&#39;</span><span class="p">,</span>
        <span class="p">),</span>
      <span class="p">),</span>
    <span class="p">);</span>
<span class="p">}</span></code></pre></div>

In the next part, I’ll complete the module by implementing caching fully, and then adding Views integration.

</description>
      <pubDate>Mon, 04 Jul 2011 14:06:03 +0100</pubDate>
      <dc:date>2011-07-04T14:06:03+01:00</dc:date>
    </item>
    <item>
      <title>Creating a Concrete5 Package: Integrating the Craftyslide JQuery Plugin</title>
      <link>http://www.lukaswhite.com/blog/post/2011/creating-concrete5-package-integrating-craftyslide-jquery-plugin</link>
      <description>In this simple tutorial, I’m going to show how Concrete5 can be extended to integrate a third-party JQuery plugin to enhance an existing module, and then how this can be encapsulated in a package. I’m going to allow the **slideshow** module to display images using the clean &amp; lightweight [Craftyslide](http://projects.craftedpixelz.co.uk/craftyslide/index.php) plugin, pictured below. 

</description>
      <pubDate>Tue, 05 Jul 2011 15:00:14 +0100</pubDate>
      <dc:date>2011-07-05T15:00:14+01:00</dc:date>
    </item>
    <item>
      <title>A Concrete5 Development Tutorial; Creating a Quote Block</title>
      <link>http://www.lukaswhite.com/blog/post/2011/concrete5-development-tutorial-creating-quote-block</link>
      <description>I needed the means to add a quote to a website I was working on – a simple task, which could be acheieved by simply adding a text or HTML block. However this can be taken a step further by implementing a simple block type specifically for quotes, with the markup generated for you. 

To mark up a quote semantically, we’ll want a `blockquote` for the content and a `cite` for the source (or author), so the HTML needs to look something like this: 

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>blockquote<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>It is the mark of an educated mind to be able to entertain a thought without accepting it.<span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;&amp;lt;</span>cite<span class="ni">&amp;gt;</span>Aristotle<span class="ni">&amp;lt;</span>/cite<span class="ni">&amp;gt;&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>/blockquote<span class="ni">&amp;gt;</span></code></pre></div>

...which will give us something a little like this: 

&lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt;&lt;img src=&quot;/images/blogs/2011/concrete5/quotes/concrete5-tutorial-quote.png&quot; width=&quot;580&quot; height=&quot;225&quot; alt=&quot;Concrete5 Module Development Tutorial: the final result&quot; /&gt;&lt;figcaption&gt;Our quote will end up looking a little like this (subject to CSS styling!)&lt;/figcaption&gt;&lt;/figure&gt; 

Of course we could just paste this structure into an HTML block, but a simple block containing two fields – content and source – is actually pretty easy to build. So, let’s begin. 


### First Steps 

Let’s call the block – imaginatively enough – **quote**. Incorporating this block into a a package is pretty simple, but outside the scope of this tutorial (and I’ve [covered packages before](/blog/post/2011/creating-concrete5-package-integrating-craftyslide-jquery-plugin)). So, simply create a directory named `quotes` in the `blocks` directory (not the `concrete` directory – this might mirror the top-level directory structure, but it’s reserved for the core, and would get overwritten with any upgrade). 

### The Database Schema 

The first thing we’ll need is to define a new database table to hold our quotes. This simply needs an identifier (which becomes the table’s primary key), the text of the quote (i.e. the content) and the source. Let’s keep the *content* flexible and allow plenty of text if required, but the *source* is unlikely to require any more characters than a simple text-field will give us. The database schema in Concrete5 gets defined according to the [ADOdb XML schema](http://phplens.com/lens/adodb/docs-datadict.htm), so a table is defined by creating a simple XML file in your block’s directory which must be called `db.xml` – and it will look like this: `/blocks/quote/db.xml` 

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;quot;</span>1.0<span class="ni">&amp;quot;</span>?<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>schema version=<span class="ni">&amp;quot;</span>0.3<span class="ni">&amp;quot;&amp;gt;</span>
	<span class="ni">&amp;lt;</span>table name=<span class="ni">&amp;quot;</span>btQuoteBlockContent<span class="ni">&amp;quot;&amp;gt;</span>
		<span class="ni">&amp;lt;</span>field name=<span class="ni">&amp;quot;</span>bID<span class="ni">&amp;quot;</span> type=<span class="ni">&amp;quot;</span>I<span class="ni">&amp;quot;&amp;gt;</span>
			<span class="ni">&amp;lt;</span>key /<span class="ni">&amp;gt;</span>
			<span class="ni">&amp;lt;</span>unsigned /<span class="ni">&amp;gt;</span>
		<span class="ni">&amp;lt;</span>/field<span class="ni">&amp;gt;</span>
		<span class="ni">&amp;lt;</span>field name=<span class="ni">&amp;quot;</span>content<span class="ni">&amp;quot;</span> type=<span class="ni">&amp;quot;</span>C2<span class="ni">&amp;quot;&amp;gt;</span>
		<span class="ni">&amp;lt;</span>/field<span class="ni">&amp;gt;</span>
		<span class="ni">&amp;lt;</span>field name=<span class="ni">&amp;quot;</span>source<span class="ni">&amp;quot;</span> type=<span class="ni">&amp;quot;</span>C<span class="ni">&amp;quot;</span> size=<span class="ni">&amp;quot;</span>255<span class="ni">&amp;quot;&amp;gt;</span>
		<span class="ni">&amp;lt;</span>/field<span class="ni">&amp;gt;</span>
	<span class="ni">&amp;lt;</span>/table<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>/schema<span class="ni">&amp;gt;</span></code></pre></div>

So, three fields – `bID` for the block identifier, which is an unsigned integer (represented by `I`) – which is the primary key – a `content` field, which is a Multibyte varchar (see [the documentation](http://phplens.com/lens/adodb/docs-datadict.htm)) and the `source` is a 255-character field (a MySQL `varchar`, referenced using a `C`). 

### The Add / Edit Forms 

Next up, we need the means to add a new quote. When adding a new block, the file `add.php` gets rendered, and all we need is a simple form. However since the form for adding a new quote is, to all intents and purposes, the same form as for editing an existing quote, what we can do is simply include a separate file which defines the form – which by convention is called `form_setup_html.php` – and use the same code for the forms for both adding and editing. So, both `add.php` and `edit.php` are identical, and look like this: `/blocks/quote/add.php` and `/blocks/quote/edit.php` 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">&amp;lt;?php   </span>
<span class="x">defined(&#39;C5_EXECUTE&#39;) or die(_(&amp;quot;Access Denied.&amp;quot;));</span>
<span class="x">$this-&amp;gt;inc(&#39;form_setup_html.php&#39;);</span></code></pre></div>

The first line prevents the file from being accessed directly, the second includes the file which defines the form, which is shown below: 

`/blocks/quote/form_setup_html.php` 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">&amp;lt;?php defined(&#39;C5_EXECUTE&#39;) or die(_(&amp;quot;Access Denied.&amp;quot;)); ?&amp;gt;  </span>
<span class="x">&amp;lt;div&amp;gt;</span>
<span class="x">&amp;lt;h2&amp;gt;&amp;lt;?php echo t(&#39;Quote Content&#39;) ?&amp;gt;&amp;lt;/h2&amp;gt;</span>
<span class="x">&amp;lt;textarea id=&amp;quot;ccm-QuoteContent&amp;quot; name=&amp;quot;content&amp;quot; style=&amp;quot;width:98%; height:200px;&amp;quot;&amp;gt;</span>
<span class="x">&amp;lt;?php echo $content ?&amp;gt;</span>
<span class="x">&amp;lt;/textarea&amp;gt;</span>
<span class="x">&amp;lt;h2&amp;gt;&amp;lt;?php echo t(&#39;Quote Source&#39;) ?&amp;gt;&amp;lt;/h2&amp;gt;</span>
<span class="x">&amp;lt;textarea id=&amp;quot;ccm-QuoteSource&amp;quot; name=&amp;quot;source&amp;quot; style=&amp;quot;width:98%; height:100px;&amp;quot;&amp;gt;</span>
<span class="x">&amp;lt;?php echo $source ?&amp;gt;</span>
<span class="x">&amp;lt;/textarea&amp;gt;</span>
<span class="x">&amp;lt;/div&amp;gt;</span></code></pre></div>

Nothing complicated here, just a form where any current value will have been made available as the variables `$content` and `$source` respectively – we’ll see these get populated by examing the next file we need to create, the block controller. 

### The Block Controller

`/blocks/quote/controller.php` `

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">&amp;lt;?php   </span>
<span class="x">defined(&#39;C5_EXECUTE&#39;) or die(_(&amp;quot;Access Denied.&amp;quot;));</span>

<span class="x">Loader::block(&#39;library_file&#39;);</span>

<span class="x">class QuoteBlockController extends BlockController {</span>
<span class="x">	</span>
<span class="x">	protected $btTable = &#39;btQuoteBlockContent&#39;;</span>
<span class="x">	protected $btInterfaceWidth = &amp;quot;600&amp;quot;;</span>
<span class="x">	protected $btInterfaceHeight = &amp;quot;400&amp;quot;;</span>
<span class="x">	</span>
<span class="x">	public $content = &amp;quot;&amp;quot;;</span>
<span class="x">	public $source = &amp;quot;&amp;quot;;	</span>
<span class="x">	</span>
<span class="x">	public function getBlockTypeDescription() {</span>
<span class="x">		return t(&amp;quot;Add simple quotes to your website.&amp;quot;);</span>
<span class="x">	}</span>
<span class="x">	</span>
<span class="x">	public function getBlockTypeName() {</span>
<span class="x">		return t(&amp;quot;Quote&amp;quot;);</span>
<span class="x">	}	 </span>
<span class="x">	</span>
<span class="x">	public function __construct($obj = null) {		</span>
<span class="x">		parent::__construct($obj); </span>
<span class="x">	}</span>
<span class="x">	</span>
<span class="x">	public function view(){ </span>
<span class="x">		$this-&amp;gt;set(&#39;content&#39;, $this-&amp;gt;content);</span>
<span class="x">		$this-&amp;gt;set(&#39;source&#39;, $this-&amp;gt;source); </span>
<span class="x">	} </span>
<span class="x">	</span>
<span class="x">	public function save($data) { </span>
<span class="x">		$args[&#39;content&#39;] = isset($data[&#39;content&#39;]) ? $data[&#39;content&#39;] : &#39;&#39;;</span>
<span class="x">		$args[&#39;source&#39;] = isset($data[&#39;source&#39;]) ? $data[&#39;source&#39;] : &#39;&#39;;</span>
<span class="x">		parent::save($args);</span>
<span class="x">	}</span>
<span class="x">}</span>
<span class="x">?&amp;gt;</span></code></pre></div>

There’s quite a lot to go through here, but nothing too complicated. This file sub-classes the `BlockController` class, which we’ll call `QuoteBlockController` because our module is called, simply, **quote**. First up, the methods `getBlockTypeName()` and `getBlockTypeDescription()` expose information for the administrative interface. The name is used when choosing a block to add, and the description is used in addition to the name when adding new functionality in the dashboard. The line:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">protected</span> <span class="nv">$btTable</span> <span class="o">=</span> <span class="s1">&#39;btQuoteBlockContent&#39;</span><span class="p">;</span></code></pre></div>

...defines a property of our block controller which indicates what database table to use. Once an association is made with a table, operations can be performed on that table using methods such as `save` within the controller. Also, some functionality – such as querying the table when showing a block – is performed automatically, once the controller knows where to look. The properties `$btInterfaceWidth` and `$btInterfaceHeight` control the dimensions of the popup window in the adimistrative interface when adding or editing an instance of our new block. The `save` method is called when the add or edit forms are submitted, and gets passed an associative array of data from the form; you’ll recognise that the indexes `content` and `source` match the names of the form elements previously defined. Calling the parent’s `save` method with this data will store the information in the table we’ve previously created, because by referring to the table name in the `$btTable` property we’ve already told the controller where that data goes. Finally, the `view` method is automatically called when the block is rendered and simply needs to take the properties of the block,`content` and `source` – which, by harnessing the power of the blocks system have *already been loaded for us* are already available as properties of the controller – and assign them to the view. This is achieved using the `set` method, and as a consequence they will be made available as variables in the view template, `view.php`, which is shown below. 

### The View Template

`/blocks/quote/view.php` `

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">&amp;lt;?php defined(&#39;C5_EXECUTE&#39;) or die(_(&amp;quot;Access Denied.&amp;quot;)); ?&amp;gt;</span>

<span class="x">&amp;lt;div id=&amp;quot;QuoteBlock&amp;lt;?php   echo intval($bID)?&amp;gt;&amp;quot; class=&amp;quot;QuoteBlock&amp;quot;&amp;gt;</span>
<span class="x">    &amp;lt;blockquote&amp;gt;</span>
<span class="x">    &amp;lt;p&amp;gt;&amp;lt;?php print $content; ?&amp;gt;&amp;lt;/p&amp;gt;</span>
<span class="x">	&amp;lt;p&amp;gt;&amp;lt;cite&amp;gt;&amp;lt;?php print $source; ?&amp;gt;&amp;lt;/cite&amp;gt;&amp;lt;/p&amp;gt;</span>
<span class="x">    &amp;lt;/blockquote&amp;gt;</span>
<span class="x">&amp;lt;/div&amp;gt;</span></code></pre></div>


Pretty simple stuff – and by doing it this way, we ensure that our markup for the quote is exactly as we intended it. 

### Installing &amp; Configuring the New Block 

So, if you browse to the Dashboard and select **Add Functionality**, you should see that the new block is available to install under the heading “Downloaded and Ready to Install”. 

&lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt;&lt;img src=&quot;/images/blogs/2011/concrete5/quotes/concrete5-install-module.jpg&quot; width=&quot;580&quot; height=&quot;200&quot; alt=&quot;Concrete5 Module Development Tutorial: installing the new block&quot; /&gt;&lt;figcaption&gt;Your new block will appear under the heading “Downloaded and Ready to Install” – click &lt;strong&gt;install&lt;/strong&gt;&lt;/figcaption&gt;&lt;/figure&gt; 

(Note that the icon displayed alongside the new block type can be personalised; all I’ve done is create a simple 16x16px icon and call it `icon.png`.) You can now try adding a block; if you scroll to the bottom of the list of available blocks you should see the new block listed: 

&lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt;&lt;img src=&quot;/images/blogs/2011/concrete5/quotes/concrete5-tutorial-add-block.jpg&quot; width=&quot;580&quot; height=&quot;485&quot; alt=&quot;Concrete5 Module Development Tutorial: Adding a block&quot; /&gt;&lt;figcaption&gt;At the bottom of the list of available blocks, you’ll notice our new block – *quote* is now available&lt;/figcaption&gt;&lt;/figure&gt; 

Selecting the quote block gives you the form we’ve just created: 

&lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt;&lt;img src=&quot;/images/blogs/2011/concrete5/quotes/concrete5-tutorial-add-quote.jpg&quot; width=&quot;580&quot; height=&quot;424&quot; alt=&quot;Concrete5 Module Development Tutorial: the add / edit form&quot; /&gt;&lt;figcaption&gt;This illustrates the form you’ll get when adding a block of type *quote* – enter the content of the quote and its source (author) in the fields provided&lt;/figcaption&gt;&lt;/figure&gt; 

If you enter a quote and its source and then click **add** then, all being well, you should end up with something like the screenshot below. &lt;figure class=&quot;captioned-image&quot; style=&quot;width:600px;&quot;&gt;&lt;img src=&quot;/images/blogs/2011/concrete5/quotes/concrete5-tutorial-quote.png&quot; width=&quot;580&quot; height=&quot;225&quot; alt=&quot;Concrete5 Module Development Tutorial: the final result&quot; /&gt;&lt;figcaption&gt;The final result – a semantically correct quote&lt;/figcaption&gt;&lt;/figure&gt;

(I’ve applied some very basic styling, I’m sure you can do better!) This is an extremely simple example, and I&amp;rsquo've left out certain things – such as validation – for brevity, but hopefully it’s enough to give you an idea of how easy it is to create functionality like this and to get started developing for Concrete5.

</description>
      <pubDate>Thu, 07 Jul 2011 13:17:05 +0100</pubDate>
      <dc:date>2011-07-07T13:17:05+01:00</dc:date>
    </item>
    <item>
      <title>The Laravel PHP Framework: A Walkthrough</title>
      <link>http://www.lukaswhite.com/blog/post/2011/laravel-php-framework-walkthrough</link>
      <description>[Laravel](http://www.laravel.com) is the new kid on the block of PHP frameworks, and whilst in its early stages of evolution (the author wrote it, he says, in the early part of 2011) it does promise – and delivers, from what I can tell – an expressive syntax and an elegant (indeed, you might say eloquent) ORM. Laravel is a fully Object Oriented MVC framework which makes extensive use of features new or recent to PHP – you can forget about running it on PHP4. With PHP5.3 compliant namespacing mechanisms as opposed to, for example, Zend Framework’s pseudo-namespacing, it’s certainly what you might call a modern framework. 

### Routes 

In Laravel you define routes – which, staying true to the RESTful paradigm, are defined not just as URI’s, but according to the HTTP operation they are to react to. Thus, instead of defining a route such as `/about-us` you would define a function to respond to a GET request on that URI, which is done using a closure which looks reassuringly like JavaScript:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;GET /about-us&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">()</span>
<span class="p">{</span>		
	<span class="k">return</span> <span class="s1">&#39;some output&#39;</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

Wild-card parameters allow parameters to be passed via the URI, and indeed you can even restrict these to numeric ID’s. So for example, your route definition could look like this: `

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;GET /person/(:num)&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
<span class="p">{</span>		
	<span class="nv">$user</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
	<span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
	<span class="nv">$view</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nv">$user</span><span class="p">);</span>
	<span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

Or, you can create a slug using the built-in `URL` class:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$article</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">slug</span> <span class="o">=</span> <span class="nx">URL</span><span class="o">::</span><span class="na">slug</span><span class="p">(</span><span class="nv">$article</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">title</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">-&amp;</span><span class="nx">quot</span><span class="p">;);</span></code></pre></div>

Then switch from `:num` to `:any` in your route definition:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;GET /article/(:any)&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">(</span><span class="nv">$slug</span><span class="p">)</span>
<span class="p">{</span>		
	<span class="c1">// .. find the article identified by slug ...</span>
<span class="p">}</span></code></pre></div>

If you think of the routes definitions as being lightweight controllers, you’ll quickly see from the examples above where the other components of a fully-fledged MVC architecture come in; the ORM (called “Eloquent”) is in action, *find*ing a User entity with the ID provided from the route, then being *bind*ed (well, bound) to a *View*. Moving on from processing GET requests, a process to handle the submission of a form might be defined thus: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;POST /form-submit&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">()</span>
<span class="p">{</span>		
	<span class="c1">// do some processing</span>
	<span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">with</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="s1">&#39;Your form submission has been received&#39;</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>

Note the fluent interface in the redirection function, allowing a flash message to be passed along the request chain. Nice syntax. Keeping RESTful, a function could be defined to delete a resource using something like this:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;DELETE /person/(:num)/delete&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
<span class="p">{</span>		
	<span class="c1">// .. delete person resource identified by $id ...</span>
	<span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="o">/</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>

I keep talking about the RESTfulness because the first thing that struck me is that it looks a great little framework for quickly scaffolding a web service. While there is not currently any content negotiation built in which would make this even easier, it’s not difficult to see how this could be extended. 

### Filters 

One of the things I particularly like about Laravel is that your route definitions can also apply filters to your input (for example CSRF protection or input sanitisation) or on their output. There are a couple of filters built in (for CSRF protection and for authentication) and they can be shared amongst routes. Thus, you could restrict access to a route from unauthorised users thus: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;GET /secure&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;before&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;auth&#39;</span><span class="p">,</span> <span class="s1">&#39;do&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span></code></pre></div>

In the example above, the filter `auth` is to be executed *before* execution of the route logic (i.e., the closure defined in the ‘do’ element). (The format of the route declaration has changed slightly from the previous, simply because the definition is getting slightly more complex.) The `auth` filter is defined for you in another closure, this time in the file `filters.php`: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;auth&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">return</span> <span class="p">(</span> <span class="o">!</span> <span class="nx">Auth</span><span class="o">::</span><span class="na">check</span><span class="p">())</span> <span class="o">?</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to_login</span><span class="p">()</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
<span class="p">},</span></code></pre></div>

This callback highlights another geature of Laravel; the built-in authentication mechanism, which I’ll cover later – for now, what about that `Redirect::to_login()` syntax? This leads nicely onto named routes. 

### Named Routes 

One of the other features of the routes system designed for developer convenience is the option to create a definition like this: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="s1">&#39;GET /user/login&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="s1">&#39;do&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">function</span><span class="p">()</span>
<span class="p">{</span>		
	<span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;user/login&#39;</span><span class="p">);</span>
<span class="p">}),</span></code></pre></div>

Now, with the route to `user_login` assigned the name `login`, you can start doing this:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to_login</span><span class="p">();</span></code></pre></div>

However, there is more to Laravel than routing; here are some other features that stood out for me. 

### The ORM 

Laravel has a built-in Object Relational Mapper (ORM) for data persistance, and provides the Model to the router’s Controller and the Views. Defining a new model using the Eloquent ORM is as simple as this: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">Post</span> <span class="k">extends</span> <span class="nx">Eloquent</span> <span class="p">{</span> <span class="p">}</span></code></pre></div>

In this example a new model is defined which, unless specified otherwise, expects to find a table named `posts` (a pluralised, lowercase version of the model’s name) and a primary key named `id` It’s common to include timestamps on creation and updating; Laravel takes care of this out of the box – all you have to do is add columns called `created_at` and `updated_at` (both of the MySQL type `TIMESTAMP`) to your base table, and the following line in the class definition: `

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">Post</span> <span class="k">extends</span> <span class="nx">Eloquent</span> <span class="p">{</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="nv">$timestamps</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span></code></pre></div>

Relationships can be modelled easily and intuitively; as is common across Laravel, if you keep to certain naming conventions then configuration is simple:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">Post</span> <span class="k">extends</span> <span class="nx">Eloquent</span> <span class="p">{</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="nf">author</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">has_one</span><span class="p">(</span><span class="s1">&#39;Author&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">tags</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">has_and_belongs_to_many</span><span class="p">(</span><span class="s1">&#39;Tag&#39;</span><span class="p">);</span>
    <span class="p">}</span></code></pre></div>

The assumptions here are: 
*   Posts are defined in a table called `posts` (lower case, pluralised form of the classname)
*   Authors are defined in a table called `authors`
*   Tags are defined in a table called `tags`
*   The `posts` table contains a column called `author_id`
*   All tables’ primary key columns are called `id`
*   A foreign key in the `tags` table is called `post_id`

### Database Support 

In additon to the ORM there is a nice fluent query builder (not dissimilar to Zend, or Drupal 7’s new database abstraction layer), and it’s database-agnostic; there is support currently for SQLite (the Laravel default), the ubiquitous MySQL or Postgres. Configuration for this, as with other areas, is simple – in fact if you’re using SQLite and place your database in the `/application/storage/db` directory and call it `application.sqlite`, then it requires no configuration whatsoever. So, for example, you can do this for insertion:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$hits</span> <span class="o">=</span> <span class="nx">Db</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;hits&#39;</span><span class="p">);</span>

<span class="nv">$hits</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">insert</span><span class="p">(</span>
	<span class="k">array</span><span class="p">(</span>
		<span class="s1">&#39;url&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$url</span><span class="p">,</span>
		<span class="s1">&#39;ts&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nb">time</span><span class="p">(),</span>
		<span class="s1">&#39;ip_address&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">Request</span><span class="o">::</span><span class="na">ip</span><span class="p">()</span>
	<span class="p">)</span>
<span class="p">);</span></code></pre></div>

Or create queries such as:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">)</span>
     <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">where</span><span class="p">(</span><span class="s1">&#39;author_id&#39;</span><span class="p">,</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span> <span class="s1">&#39;123&#39;</span><span class="p">)</span>
     <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">where_in</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;draft&#39;</span><span class="p">,</span> <span class="s1">&#39;unpublished&#39;</span><span class="p">))</span>
     <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">get</span><span class="p">();</span></code></pre></div>

You can even use what Laravel calls *dynamic where methods*:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$user</span> <span class="o">=</span> <span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">where_email_and_password</span><span class="p">(</span><span class="s1">&#39;hello@lukaswhite.com&#39;</span><span class="p">,</span> <span class="s1">&#39;secret&#39;</span><span class="p">);</span></code></pre></div>

### Simple Configuration 

Configuration is in the form of a collection of files in the `/application/config` directory, each returning an array of named configuration values. Extending the configuration options is as simple as adding a new file. Add a file called `facebook.php`, for example: `

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">&amp;lt;?php</span>
<span class="x">return array(</span>
<span class="x">	&#39;app_id&#39;    =&amp;gt; &#39;YOUR_APP_ID_HERE&#39;,</span>
<span class="x">	&#39;secret&#39;    =&amp;gt; &#39;YOUR_SECRET_HERE&#39;,</span>
<span class="x">);</span>
<span class="x">?&amp;gt;</span></code></pre></div>

...and you can do something like this from anywhere in your code: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$facebook_config</span> <span class="o">=</span> <span class="nx">Config</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;facebook&#39;</span><span class="p">);</span>  <span class="c1">// returns an array of options</span></code></pre></div>

Or you can be more specific:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$api_key</span> <span class="o">=</span> <span class="nx">Config</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;facebook.api_key&#39;</span><span class="p">);</span></code></pre></div>

In keeping with Laravel’s intention to require the minimum possible configuration, the pre-existing configuration files come pre-loaded with sensible default values, but changing any of them is simple. 

### An Auth Component 

Authentication is largely taken care of for you by the Auth class; provided you adhere to certain assumptions; users are represented by an “Eloquent” model, there is a `password` and a column called `salt` (which is generated for you by the framework's built-in hashing utility). The identifying column is configurable however, should you wish to allow people to log in using an email address, for example. There is not, at time of writing, an authorisation / ACL model, but the authentication system provided is probably adequate for most small web applications. 

### A Data Validation Library 

Data validation is neatly done, with a basic set of generic validators – lengths, inclusion (e.g. checkboxes or radio buttons), regular expression matching or acceptance of (like a checkbox being ticked, e.g. acceptance of terms and conditions) – all with the minimum of configuration. If you call a set of validators without telling it what to validate, it will automatically validate the input (e.g. GET / POST parameters). Again, simplistic, but cover most simple cases – and there’s nothing to stop you from defining your own. 

### Text and Inflection Utilities 

There are some fairly standard text-related helper functions for operations such as: 

*   (English) language processing, such as pluralisation
*   Character or word-based trimming
*   There is even a basic bad-word (“censor”) filter There is also some rudimentary internationalisation support, primarily for translatable strings. 

### Caching and Logging 

While developing an application with the framework, you can opt to get an error message and a full stack trace in a nicely presented error page. Additionally, logging to a file is simple – change a configuration value or two and set the log files' directory to be writeable. 

### Extensibility 

The true test of any framework, arguably, is its extensibility – and overriding or extending framework classes is easy. Everything is namespaced with framework classes aliased, thus: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;user/login&#39;</span><span class="p">);</span></code></pre></div>

...would, were it not for aliasing, be:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$view</span> <span class="o">=</span> <span class="nx">System\View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;user/login&#39;</span><span class="p">);</span></code></pre></div>

The **alias.php** configuration file defines these aliases as a name/value array, e.g.:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">return</span> <span class="k">array</span><span class="p">(</span>
	<span class="s1">&#39;Auth&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;System\\Auth&#39;</span><span class="p">,</span>
	<span class="o">...</span>
	<span class="s1">&#39;View&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;System\\View&#39;</span><span class="p">,</span>
<span class="p">);</span></code></pre></div>

Therefore should you wish, for example, to start using a custom View across your code, a quick re-jig of your aliases and it’s done:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">return</span> <span class="k">array</span><span class="p">(</span>
	<span class="s1">&#39;View&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;My\\View&#39;</span><span class="p">,</span>
<span class="p">);</span></code></pre></div>

### Conclusions 

Even after looking closely at Laravel and building a few little applications with it, I stick by my view that it looks like a tool for building web services – but this is no bad thing. In part it’s because some of the things I’ve become accustomed to for web applications aren't there; managing dependencies (e.g. of Javascript files), layouts, decorators and so on. There are things that are either limited or simple aren't particularly evolved – the form-building functions (which I’ve not even touched on) are a shadow of those offered by Zend_Form, or Drupal with its Form API, for example – but this is a very new framework and one which will surely evolve. One of the great things about the framework is its learning curve – indeed, I’ve covered a lot of the basics here and if you work through this post you wouldn’t be far off being able to develop a simple application. Configuration is beautifully simple, and whilst certain assumptions can be frustrating at first, if you’re building something from scratch then you’ll soon appreciate how little you actually have to do to get up and running. The main thing that’s not clear nor well documented is the process for extending the functionality; extending the system classes is easy but the packages mechanism is largely undocumented – but packages are starting to appear nonetheless. My view is that the framework would be an excellent introduction to a simple web framework from an O-O minded PHP developer, a promising way to start building a web service and a good way of building a quick prototype for a website or application. Very promising indeed.

</description>
      <pubDate>Fri, 05 Aug 2011 14:05:33 +0100</pubDate>
      <dc:date>2011-08-05T14:05:33+01:00</dc:date>
    </item>
    <item>
      <title>Facebook Canvas Pages to Require SSL Certificates</title>
      <link>http://www.lukaswhite.com/blog/post/2011/facebook-canvas-pages-require-ssl-certificates</link>
      <description>On the first of October, Facebook will make another change which could have a significant – and potentially costly – impact to your applications and pages. As part of its latest moves to increase security across the platform, in addition to OAuth adoption they will expect that your canvas applications to be hosted at a secure address (https). If a user browses to your page via https – and millions are beginning to change their settings so that they are – instead of your lovingly crafted content, they’ll see the following warning: 

</description>
      <pubDate>Mon, 08 Aug 2011 15:45:48 +0100</pubDate>
      <dc:date>2011-08-08T15:45:48+01:00</dc:date>
    </item>
    <item>
      <title>The Third Most Popular CMS is....Website Tonight</title>
      <link>http://www.lukaswhite.com/blog/post/2011/third-most-popular-cms-website-tonight</link>
      <description>I noticed something this week while looking at the [latest CMS usage statistics](http://trends.builtwith.com/cms) from BuiltWith Trends that surprised me. BuiltWith Trends provides information on the usage of various technologies across the web – including CMS’s, – and it’s of little surprise that they have Wordpress up there at no#1 and Joomla! a little way behind in second. What came as a surprise to me was that up in third was a CMS called “Website Tonight”. That’s ahead of [Drupal](/blog/categories/drupal), which I had always considered one of the “Big Three”. Perhaps tellingly, in separate statistics for the Top Million sites (according to data from Quantcast) it drops down to seventh, and out of the top ten CMS’s altogether when you get to the “top ten websites”. I’ll be honest – I’d never heard of Website Tonight. On its &lt;a href=&quot;http://www.starfieldtech.com/products/websitetonight.htm&quot; rel=&quot;nofollow&quot; title=&quot;The Website Tonight website&quot;&gt;inauspicious website&lt;/a&gt;, Website Tonight to be: “an Internet-based Web site creation tool that enables users to build and publish Web sites in a few simple steps. An easy-to-use turnkey solution, WebSite Tonight guides the user through the entire process of outlining, building, analyzing, optimizing, and, ultimately, publishing a Web site to the Internet.”. I suspect what’s key on this site is the button entitled “Become a Reseller” – presumably they provide white-label website creation tools for these “build your own website” websites. It does appear that, amongst others, the product is available as a service through &lt;a href=&quot;http://www.godaddy.com/hosting/website-builder.aspx&quot; rel=&quot;nofollow&quot; title=&quot;Godaddy use Website Tonight&quot;&gt;the likes of GoDaddy&lt;/a&gt;. Either way, it’s a surprising statistic yet one which I don’t believe will affect my decision as to what technology to concentrate on for now – on my head be it! If you happen to know any more about Website Tonight, do let me know in the comments.

</description>
      <pubDate>Mon, 15 Aug 2011 14:28:42 +0100</pubDate>
      <dc:date>2011-08-15T14:28:42+01:00</dc:date>
    </item>
    <item>
      <title>Using an Additional Database in Drupal 7</title>
      <link>http://www.lukaswhite.com/blog/post/2011/using-additional-database-drupal-7</link>
      <description>One of the nice, lesser-known features of Drupal 7 is the ability to use additional databases and switch at ease. This might be useful for external databases, or if you have another database in an alternative format – perhaps you have an SQLite database that for performance reasons, you don’t wish to migrate. (Yes, Drupal 7 now supports SQLite!) The configuration can be a little confusing at first, so let’s look at a `settings.php` file set up to use two databases: `drupal` on `Localhost`, and `db2` situated at `db.example.com`.

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$databases</span> <span class="o">=</span> <span class="k">array</span> <span class="p">(</span>
  <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> 
  <span class="k">array</span> <span class="p">(</span>
    <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> 
    <span class="k">array</span> <span class="p">(</span>
      <span class="s1">&#39;database&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;drupal&#39;</span><span class="p">,</span>
      <span class="s1">&#39;username&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span>
      <span class="s1">&#39;password&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;password&#39;</span><span class="p">,</span>
      <span class="s1">&#39;host&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
      <span class="s1">&#39;port&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
      <span class="s1">&#39;driver&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
      <span class="s1">&#39;prefix&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
    <span class="p">),</span>
  <span class="p">),</span>
  <span class="s1">&#39;external&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> 
  <span class="k">array</span> <span class="p">(</span>
    <span class="s1">&#39;default&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> 
    <span class="k">array</span> <span class="p">(</span>
      <span class="s1">&#39;database&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;db1&#39;</span><span class="p">,</span>
      <span class="s1">&#39;username&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;username2&#39;</span><span class="p">,</span>
      <span class="s1">&#39;password&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;password2&#39;</span><span class="p">,</span>
      <span class="s1">&#39;host&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;db.example.com&#39;</span><span class="p">,</span>
      <span class="s1">&#39;port&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
      <span class="s1">&#39;driver&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
      <span class="s1">&#39;prefix&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
    <span class="p">),</span>
  <span class="p">),</span>
<span class="p">);</span></code></pre></div>

The file is fairly self-explanatory – the default database is called `drupal` and the second database is keyed `external` (i.e., the **connection key**). The confusion might lie in the nested `default`. In addition to allowing additional, separate databases, Drupal now allows master/slave configurations. In the example above the second level `default` is the **target**, and refers to the *master* server – as does the second. If you examine the code it can become quite easy to confuse whether `default` refers to the default database, the master database or the additional, master database. (perhaps `master` would have been a better term?) just remember, connection key followed by target. Switching databases in your code is simple: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nx">db_set_active</span><span class="p">(</span><span class="s1">&#39;external&#39;</span><span class="p">);</span></code></pre></div>

Any subsequent database operations (for example, `db_select`) will now take place on your second database. There’s a caveat – you *must* switch back to the default database when you’ve done. Otherwise you’ll get tell-tale error; a “Base table or view not found”, usually something like one of Drupal’s cache tables, or commonly the `block` table – either way, the error message will tell you it’s your database as the table names will be prefixed with the schema in the error message. Switching back to the default database is easy; no key is required as the default is assumed, thus: 

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nx">db_set_active</span><span class="p">();</span></code></pre></div>

Hope this helps.

</description>
      <pubDate>Tue, 16 Aug 2011 14:40:08 +0100</pubDate>
      <dc:date>2011-08-16T14:40:08+01:00</dc:date>
    </item>
    <item>
      <title>Drupal 7: drupal_execute has Gone, Say Hello to drupal_form_submit</title>
      <link>http://www.lukaswhite.com/blog/post/2011/drupal-7-drupal_execute-has-gone-say-hello-to-drupal_form_submit</link>
      <description>As has been commented elsewhere, when you’re programmatically inserting data the most reliable way of doing so is often to simulate form submission – that way, any validation rules are applied and other modules have a chance to intercept the submission to do what they need to with the data. This 

</description>
      <pubDate>Wed, 17 Aug 2011 11:14:43 +0100</pubDate>
      <dc:date>2011-08-17T11:14:43+01:00</dc:date>
    </item>
    <item>
      <title>Drupal 6 Install Profile Fail: Call to undefined function db_result() in path.inc</title>
      <link>http://www.lukaswhite.com/blog/post/2011/drupal-6-install-profile-fail-call-undefined-function-dbresult-pathinc</link>
      <description>I’ve just spent hours trying to get an install profile to work, which was giving me this error: 

</description>
      <pubDate>Tue, 23 Aug 2011 17:48:17 +0100</pubDate>
      <dc:date>2011-08-23T17:48:17+01:00</dc:date>
    </item>
    <item>
      <title>Seven Useful Drupal Modules to Enhance Usability for Administrators</title>
      <link>http://www.lukaswhite.com/blog/post/2011/seven-useful-drupal-modules-enhance-usability-administrators</link>
      <description>One of Drupal’s weaknesses, I feel, is that out-of-the-box usability for administrators is a little poor (the Drupal team themselves would probably agree with me, however this is something that’s now being addressed in a big way). There are, however, plenty of ways to make the experience better through a set of Drupal modules which I’ll be covering in this post. However before even thinking about modules, it’s important you have a good admin theme – and there are a few good options. [Rootcandy](http://drupal.org/project/rootcandy) is a perennial favourite, and comes in three flavours; standard, fixed (i.e. a fixed width) and dark. 

</description>
      <pubDate>Wed, 24 Aug 2011 11:03:13 +0100</pubDate>
      <dc:date>2011-08-24T11:03:13+01:00</dc:date>
    </item>
    <item>
      <title>Using Less, the Dynamic Stylesheet Language, in Concrete5</title>
      <link>http://www.lukaswhite.com/blog/post/2011/using-less-dynamic-stylesheet-language-concrete5</link>
      <description>&lt;img src=&quot;http://www.lukaswhite.com/images/blogs/2011/concrete5/less.png&quot; width=&quot;199&quot; height=&quot;81&quot; alt=&quot;Less, the dynamic styesheet language&quot; style=&quot;float:right;margin:0 10px 10px 0;&quot; /&gt;

</description>
      <pubDate>Fri, 02 Sep 2011 03:03:10 +0100</pubDate>
      <dc:date>2011-09-02T03:03:10+01:00</dc:date>
    </item>
    <item>
      <title>Extending Drupal 7 Block Permissions</title>
      <link>http://www.lukaswhite.com/blog/post/2011/extending-drupal-7-block-permissions</link>
      <description>Drupal 7’s block module can be a little limited in its permissions; “Administer Blocks” is a rather sweeping capability, and often it’s useful to be able to make it that bit more granular. For example, you may have a number of blocks throughout the site but once they have been placed in the correct region and the visibility correctly configured (which often isn’t the simplest of processes), you don’t want content managers to change those settings. You do, however, need to allow them to change the title as it appears to site visitors, and of course the content. This isn’t possible out-of-the-box; luckily, it’s not that hard to do. Inspired by [kiamlaluno's](http://drupal.stackexchange.com/users/199/kiamlaluno) post [on Drupal Answers](http://drupal.stackexchange.com/questions/1581/restricting-block-changes) along these lines, I’ve knocked up a simple module to make permissions granular enough for just a situation. It’s incredibly simple and somewhat limited, but it does enable to you to grant or deny access to each part of a block’s configuration, i.e.: 
*   the **title** as it appears to users
*   the **description** as it appears in the back-end
*   **block content**
*   the **regions** the block is assigned to
*   **visibility** settings 

</description>
      <pubDate>Sun, 04 Sep 2011 20:46:41 +0100</pubDate>
      <dc:date>2011-09-04T20:46:41+01:00</dc:date>
    </item>
    <item>
      <title>Migrating a Concrete5 Site from Windows to Linux, and MySQL Case Sensitivity Hell</title>
      <link>http://www.lukaswhite.com/blog/post/2011/migrating-concrete5-site-windows-linux-and-mysql-case-sensitivity-hell</link>
      <description>If, like me, you often develop on a Windows platform and then host using a *Nix-based server, Concrete5 has a gotcha which will probably hit you when you come to publish your site. At some point no doubt you’ll reach the point where you’ve copied the codebase to your server, created a database dump and imported it into the MySQL instance on your *Nix-based server. Try browsing to your site at this point, though, and you’ll get a message a lot like this: 

	Fatal error: Uncaught exception 'ADODB_Exception' with message 'mysql error: [1146: Table 'mysite.Config' doesn't exist] in EXECUTE(&quot;select * from Config where uID = 0 order by cfKey asc&quot;) ' in /var/www/mysite/htdocs/concrete/libraries/3rdparty/adodb/adodb-exceptions.inc.php:78 Stack trace: #0 /var/www/mysite/htdocs/concrete/libraries/3rdparty/adodb/adodb.inc.php(1037): adodb_throw('mysql', 'EXECUTE', 1146, 'Table 'mysite...', 'select * from C...', false, Object(ADODB_mysql)) #1 /var/www/mysite/htdocs/concrete/libraries/3rdparty/adodb/adodb.inc.php(1012): ADOConnection-&gt;_Execute('select * from C...', false) #2 /var/www/mysite/htdocs/concrete/libraries/database.php(75): ADOConnection-&gt;Execute('select * from C...') #3 /var/www/mysite/htdocs/concrete/models/config.php(151): Database-&gt;__call('Execute', Array) #4 /var/www/mysite/htdocs/concrete/models/config.php(151): Database-&gt;Execute('select * from C...') #5 /var/www/mysite in /var/www/mysite/htdocs/concrete/libraries/3rdparty/adodb/adodb-exceptions.inc.php on line 78

The reason for this is simple – although it might not be apparent. Concrete5 uses CamelCase table names such as `BlockTypes`, `CollectionAttributeValues` and `FileSearchIndexAttributes`. As soon as you install Concrete5 on Windows (under a default configuration) these table names are converted to lowercase – so in those specific examples, you’ll get table names such as `blocktypes`, `collectionattributevalues` and `filesearchindexattributes`. On Windows, MySQL table names are not case sensitive, but it’s set up such that rather than ignore capitalisation, it does away with it altogether. Linux and Unix on the other hand, are case sensitive and so in this instance, the table `Config` can’t be found because you’ll have unwittingly imported the table `config` – and you have Windows to thank. There is an option in MySQL which allows you to turn off this feature of converting table names to lowercase. In your `my.ini`, adding or amending the line: `set-variable=lower_case_table_names=0` However, the [MySQL documentation](http://mysql2.mirrors-r-us.net/doc/refman/5.1/en/identifier-case-sensitivity.html) reccomends that this value be set to 1 if you’re using InnoDB. Also bear in mind that changing this value will only affect newly created tables. You would of course find that this method is useless if you find yourself in the situation above, as the conversion has already been done. Your best option, therefore, is to convert the table names on your *Nix database sever back to CamelCase. To do so you can run the following SQL script (it’s based on Concrete5 5.4.2.2, and do bear in mind that any tables created by third-party add-ons won’t be included): 

<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">areagroupblocktypes</span> <span class="k">TO</span> <span class="n">AreaGroupBlockTypes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">areagroups</span> <span class="k">TO</span> <span class="n">AreaGroups</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">areas</span> <span class="k">TO</span> <span class="n">Areas</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atdefault</span> <span class="k">TO</span> <span class="n">atDefault</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributesetkeys</span> <span class="k">TO</span> <span class="n">AttributeSetKeys</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributesets</span> <span class="k">TO</span> <span class="n">AttributeSets</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributekeys</span> <span class="k">TO</span> <span class="n">AttributeKeys</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributekeycategories</span> <span class="k">TO</span> <span class="n">AttributeKeyCategories</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributetypecategories</span> <span class="k">TO</span> <span class="n">AttributeTypeCategories</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributetypes</span> <span class="k">TO</span> <span class="n">AttributeTypes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attributevalues</span> <span class="k">TO</span> <span class="n">AttributeValues</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">blockrelations</span> <span class="k">TO</span> <span class="n">BlockRelations</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">blocktypes</span> <span class="k">TO</span> <span class="n">BlockTypes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">blocks</span> <span class="k">TO</span> <span class="n">Blocks</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionattributevalues</span> <span class="k">TO</span> <span class="n">CollectionAttributeValues</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversionblockpermissions</span> <span class="k">TO</span> <span class="n">CollectionVersionBlockPermissions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversionblocks</span> <span class="k">TO</span> <span class="n">CollectionVersionBlocks</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversionblockstyles</span> <span class="k">TO</span> <span class="n">CollectionVersionBlockStyles</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversionarealayouts</span> <span class="k">TO</span> <span class="n">CollectionVersionAreaLayouts</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversionareastyles</span> <span class="k">TO</span> <span class="n">CollectionVersionAreaStyles</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversions</span> <span class="k">TO</span> <span class="n">CollectionVersions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collections</span> <span class="k">TO</span> <span class="n">Collections</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">composercontentlayout</span> <span class="k">TO</span> <span class="n">ComposerContentLayout</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">composerdrafts</span> <span class="k">TO</span> <span class="n">ComposerDrafts</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">composertypes</span> <span class="k">TO</span> <span class="n">ComposerTypes</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">config</span> <span class="k">TO</span> <span class="n">Config</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">dashboardhomepage</span> <span class="k">TO</span> <span class="n">DashboardHomepage</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">downloadstatistics</span> <span class="k">TO</span> <span class="n">DownloadStatistics</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">fileattributevalues</span> <span class="k">TO</span> <span class="n">FileAttributeValues</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filepermissionfiletypes</span> <span class="k">TO</span> <span class="n">FilePermissionFileTypes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">customstylepresets</span> <span class="k">TO</span> <span class="n">CustomStylePresets</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">customstylerules</span> <span class="k">TO</span> <span class="n">CustomStyleRules</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filepermissions</span> <span class="k">TO</span> <span class="n">FilePermissions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">taskpermissionusergroups</span> <span class="k">TO</span> <span class="n">TaskPermissionUserGroups</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">taskpermissions</span> <span class="k">TO</span> <span class="n">TaskPermissions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filesetpermissions</span> <span class="k">TO</span> <span class="n">FileSetPermissions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">fileversions</span> <span class="k">TO</span> <span class="n">FileVersions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">fileversionlog</span> <span class="k">TO</span> <span class="n">FileVersionLog</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filestoragelocations</span> <span class="k">TO</span> <span class="n">FileStorageLocations</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">files</span> <span class="k">TO</span> <span class="n">Files</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">groups</span> <span class="k">TO</span> <span class="n">Groups</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">jobs</span> <span class="k">TO</span> <span class="n">Jobs</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">jobslog</span> <span class="k">TO</span> <span class="n">JobsLog</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">layouts</span> <span class="k">TO</span> <span class="n">Layouts</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">layoutpresets</span> <span class="k">TO</span> <span class="n">LayoutPresets</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">systemnotifications</span> <span class="k">TO</span> <span class="n">SystemNotifications</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">packages</span> <span class="k">TO</span> <span class="n">Packages</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagepaths</span> <span class="k">TO</span> <span class="n">PagePaths</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagesearchindex</span> <span class="k">TO</span> <span class="n">PageSearchIndex</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagepermissionpagetypes</span> <span class="k">TO</span> <span class="n">PagePermissionPageTypes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagepermissions</span> <span class="k">TO</span> <span class="n">PagePermissions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagestatistics</span> <span class="k">TO</span> <span class="n">PageStatistics</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagethemes</span> <span class="k">TO</span> <span class="n">PageThemes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagethemestyles</span> <span class="k">TO</span> <span class="n">PageThemeStyles</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagetypeattributes</span> <span class="k">TO</span> <span class="n">PageTypeAttributes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pagetypes</span> <span class="k">TO</span> <span class="n">PageTypes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pages</span> <span class="k">TO</span> <span class="n">Pages</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">pilecontents</span> <span class="k">TO</span> <span class="n">PileContents</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">piles</span> <span class="k">TO</span> <span class="n">Piles</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">userattributekeys</span> <span class="k">TO</span> <span class="n">UserAttributeKeys</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">userattributevalues</span> <span class="k">TO</span> <span class="n">UserAttributeValues</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">userprivatemessages</span> <span class="k">TO</span> <span class="n">UserPrivateMessages</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">userprivatemessagesto</span> <span class="k">TO</span> <span class="n">UserPrivateMessagesTo</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">userbannedips</span> <span class="k">TO</span> <span class="n">UserBannedIPs</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">usergroups</span> <span class="k">TO</span> <span class="n">UserGroups</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">uservalidationhashes</span> <span class="k">TO</span> <span class="n">UserValidationHashes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">logs</span> <span class="k">TO</span> <span class="n">Logs</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">mailimporters</span> <span class="k">TO</span> <span class="n">MailImporters</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">mailvalidationhashes</span> <span class="k">TO</span> <span class="n">MailValidationHashes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">useropenids</span> <span class="k">TO</span> <span class="n">UserOpenIDs</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">users</span> <span class="k">TO</span> <span class="n">Users</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">usersfriends</span> <span class="k">TO</span> <span class="n">UsersFriends</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">signuprequests</span> <span class="k">TO</span> <span class="n">SignupRequests</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filesets</span> <span class="k">TO</span> <span class="n">FileSets</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filesetsavedsearches</span> <span class="k">TO</span> <span class="n">FileSetSavedSearches</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filesetfiles</span> <span class="k">TO</span> <span class="n">FileSetFiles</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atboolean</span> <span class="k">TO</span> <span class="n">atBoolean</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atbooleansettings</span> <span class="k">TO</span> <span class="n">atBooleanSettings</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atdatetimesettings</span> <span class="k">TO</span> <span class="n">atDateTimeSettings</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atdatetime</span> <span class="k">TO</span> <span class="n">atDateTime</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atfile</span> <span class="k">TO</span> <span class="n">atFile</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atnumber</span> <span class="k">TO</span> <span class="n">atNumber</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atselectsettings</span> <span class="k">TO</span> <span class="n">atSelectSettings</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">attextareasettings</span> <span class="k">TO</span> <span class="n">atTextareaSettings</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atselectoptions</span> <span class="k">TO</span> <span class="n">atSelectOptions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">atselectoptionsselected</span> <span class="k">TO</span> <span class="n">atSelectOptionsSelected</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">ataddress</span> <span class="k">TO</span> <span class="n">atAddress</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">ataddresscustomcountries</span> <span class="k">TO</span> <span class="n">atAddressCustomCountries</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">ataddresssettings</span> <span class="k">TO</span> <span class="n">atAddressSettings</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btnavigation</span> <span class="k">TO</span> <span class="n">btNavigation</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btdatenav</span> <span class="k">TO</span> <span class="n">btDateNav</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btexternalform</span> <span class="k">TO</span> <span class="n">btExternalForm</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btcontentfile</span> <span class="k">TO</span> <span class="n">btContentFile</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btflashcontent</span> <span class="k">TO</span> <span class="n">btFlashContent</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btform</span> <span class="k">TO</span> <span class="n">btForm</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btformquestions</span> <span class="k">TO</span> <span class="n">btFormQuestions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btformanswerset</span> <span class="k">TO</span> <span class="n">btFormAnswerSet</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btformanswers</span> <span class="k">TO</span> <span class="n">btFormAnswers</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btgooglemap</span> <span class="k">TO</span> <span class="n">btGoogleMap</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btguestbook</span> <span class="k">TO</span> <span class="n">btGuestBook</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btguestbookentries</span> <span class="k">TO</span> <span class="n">btGuestBookEntries</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btcontentlocal</span> <span class="k">TO</span> <span class="n">btContentLocal</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btcontentimage</span> <span class="k">TO</span> <span class="n">btContentImage</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btfile</span> <span class="k">TO</span> <span class="n">btFile</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btnextprevious</span> <span class="k">TO</span> <span class="n">btNextPrevious</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btpagelist</span> <span class="k">TO</span> <span class="n">btPageList</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btrssdisplay</span> <span class="k">TO</span> <span class="n">btRssDisplay</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btsearch</span> <span class="k">TO</span> <span class="n">btSearch</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btslideshow</span> <span class="k">TO</span> <span class="n">btSlideshow</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btslideshowimg</span> <span class="k">TO</span> <span class="n">btSlideshowImg</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btsurvey</span> <span class="k">TO</span> <span class="n">btSurvey</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btsurveyoptions</span> <span class="k">TO</span> <span class="n">btSurveyOptions</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btsurveyresults</span> <span class="k">TO</span> <span class="n">btSurveyResults</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">bttags</span> <span class="k">TO</span> <span class="n">btTags</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btvideo</span> <span class="k">TO</span> <span class="n">btVideo</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btyoutube</span> <span class="k">TO</span> <span class="n">btYouTube</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionsearchindexattributes</span> <span class="k">TO</span> <span class="n">CollectionSearchIndexAttributes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">filesearchindexattributes</span> <span class="k">TO</span> <span class="n">FileSearchIndexAttributes</span><span class="p">;</span> 
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">usersearchindexattributes</span> <span class="k">TO</span> <span class="n">UserSearchIndexAttributes</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btcorescrapbookdisplay</span> <span class="k">TO</span> <span class="n">btCoreScrapbookDisplay</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btcorestackdisplay</span> <span class="k">TO</span> <span class="n">btCoreStackDisplay</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">btdashboardnewsflowlatest</span> <span class="k">TO</span> <span class="n">btDashboardNewsflowLatest</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">collectionversionrelatededits</span> <span class="k">TO</span> <span class="n">CollectionVersionRelatedEdits</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">stacks</span> <span class="k">TO</span> <span class="n">Stacks</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">systemantispamlibraries</span> <span class="k">TO</span> <span class="n">SystemAntispamLibraries</span><span class="p">;</span>
<span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">systemcaptchalibraries</span> <span class="k">TO</span> <span class="n">SystemCaptchaLibraries</span><span class="p">;</span></code></pre></div>

</description>
      <pubDate>Fri, 21 Oct 2011 17:02:43 +0100</pubDate>
      <dc:date>2011-10-21T17:02:43+01:00</dc:date>
    </item>
    <item>
      <title>Targetted Geolocation with Geonames on PHPMaster</title>
      <link>http://www.lukaswhite.com/blog/post/2011/targetted-geolocation-geonames-phpmaster</link>
      <description>I haven’t blogged for a while, but I have been writing. I recently wrote an article for PHP Master (part of the Sitepoint family) on geolocation, called [Targetted Geolocation with Geonames](http://phpmaster.com/targeted-geolocation-with-geonames).

</description>
      <pubDate>Mon, 26 Dec 2011 14:30:50 +0000</pubDate>
      <dc:date>2011-12-26T14:30:50+00:00</dc:date>
    </item>
    <item>
      <title>Using Laravel's Pagination Class with JQuery Masonry and Infinite Scroll</title>
      <link>http://www.lukaswhite.com/blog/post/2012/using-laravels-pagination-class-jquery-masonry-and-infinite-scroll</link>
      <description>Just a quick one, but it’s something that I got stuck with for a while.

</description>
      <pubDate>Wed, 25 Jul 2012 14:15:02 +0100</pubDate>
      <dc:date>2012-07-25T14:15:02+01:00</dc:date>
    </item>
    <item>
      <title>Getting Track Artwork from Spotify using PHP</title>
      <link>http://www.lukaswhite.com/blog/post/2012/getting-track-artwork-spotify-using-php</link>
      <description>At time of writing, Spotify doesn’t provide a track’s artwork via its API.

So, I’ve written a simple function to get the image; but please note, not only is it quick and dirty, but it’s horribly inefficient and should be used sparingly – at the very least, make sure you cache the results somewhere!

You can access a public-facing web-page about a particular track using the following URL:

**`http://open.spotify.com/track/[TRACK-ID]`**

...where [TRACK-ID] is the last part of the track’s URI – so for example, for the track represented by the URI **`spotify:track:5fpizYGbi5IQoEraj6FP0R`**, the track ID would be **`5fpizYGbi5IQoEraj6FP0R`**, and thus the URL to the page would be:

[**`http://open.spotify.com/track/5fpizYGbi5IQoEraj6FP0R`**](http://open.spotify.com/track/5fpizYGbi5IQoEraj6FP0R)

If you take a look at the HTML source, you’ll see a fair few `&lt;meta&gt;` tags, like so:

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>meta charset=<span class="ni">&amp;quot;</span>utf-8<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>Intergalactic by Beastie Boys on Spotify<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta http-equiv=<span class="ni">&amp;quot;</span>X-UA-Compatible<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>IE=9<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta name=<span class="ni">&amp;quot;</span>viewport<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>width=device-width, initial-scale=1, maximum-scale=1<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta name=<span class="ni">&amp;quot;</span>apple-itunes-app<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>app-id=324684580<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:site_name<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>Spotify<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>fb:app_id<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>174829003346<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:title<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>Intergalactic<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:description<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>Intergalactic, a song by Beastie Boys on Spotify.<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:url<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>http://open.spotify.com/track/5fpizYGbi5IQoEraj6FP0R<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:image<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>http://o.scdn.co/image/97092f295b383b1c59445ef9525051655ffa78e3<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:type<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>music.song<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:audio<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>spotify:track:5fpizYGbi5IQoEraj6FP0R<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>og:audio:type<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>audio/vnd.facebook.bridge<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>music:duration<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>231<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>music:album<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>http://open.spotify.com/album/6eGYLONkDMja0MNtZWnRRB<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>music:album:track<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>7<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>music:musician<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>http://open.spotify.com/artist/03r4iKL2g2442PT9n2UKsx<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>music:release_date<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>2009-09-22<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>twitter:card<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>summary<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>twitter:url<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>http://open.spotify.com/track/5fpizYGbi5IQoEraj6FP0R<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>twitter:image<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>http://o.scdn.co/image/97092f295b383b1c59445ef9525051655ffa78e3<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>twitter:description<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>A song by Beastie Boys on Spotify.<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>twitter:title<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>Intergalactic<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>twitter:site<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>@spotify<span class="ni">&amp;quot;&amp;gt;</span>
<span class="ni">&amp;lt;</span>meta property=<span class="ni">&amp;quot;</span>description<span class="ni">&amp;quot;</span> content=<span class="ni">&amp;quot;</span>Intergalactic, a song by Beastie Boys on Spotify. Don<span class="ni">&amp;amp;</span>#39;t have Spotify? Get it at Spotify.com – it<span class="ni">&amp;amp;</span>#39;s free!<span class="ni">&amp;quot;&amp;gt;</span></code></pre></div>

There’s loads of useful info in there, but this is the line I’m interested in:

&lt;meta property=&quot;og:image&quot; content=&quot;http://o.scdn.co/image/97092f295b383b1c59445ef9525051655ffa78e3&quot; /&gt;

I’m going to use [phpQuery](http://code.google.com/p/phpquery/) to parse the HTML and extract the line I want – it provides a JQuery-like syntax for parsing an HTML document. It’s available as a PEAR package, though for the purposes of this post, I simply downloaded it as a single file – here is a [direct download link](http://code.google.com/p/phpquery/downloads/detail?name=phpQuery-0.9.5.386-onefile.zip&amp;can=2&amp;q=) to the version I used.

The code starts with a very simple function for fetching a document using cURL:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">_fetch_url</span><span class="p">(</span><span class="nv">$url</span><span class="p">){</span>
     <span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
     <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
     <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
     <span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_TIMEOUT</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
      
     <span class="nv">$ret_data</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
     <span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span> 
     <span class="k">return</span> <span class="nv">$re_data</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

There are plenty of other ways of doing this, including `file_get_contents`, so use whatever you prefer.

Here’s the example of a function, `get_track_artwork` which given a track ID, will return the artwork from Spotify – I’ve commented it heavily, so it should be self-explanatory:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">get_track_artwork</span><span class="p">(</span><span class="nv">$track_id</span><span class="p">)</span>
<span class="p">{</span>
     <span class="c1">// require the phpQuery library</span>
     <span class="k">require_once</span><span class="p">(</span><span class="s1">&#39;libraries/phpquery/phpQuery-onefile.php&#39;</span><span class="p">);</span>

     <span class="c1">// Get the URL to the page for this track</span>
     <span class="nv">$track_url</span> <span class="o">=</span> <span class="s1">&#39;http://open.spotify.com/track/&#39;</span> <span class="o">.</span> <span class="nv">$track_id</span><span class="p">;</span>  

     <span class="c1">// Grab the HTML</span>
     <span class="nv">$html</span> <span class="o">=</span> <span class="nx">fetch_url</span><span class="p">(</span><span class="nv">$track_url</span><span class="p">);</span><span class="c1">//load album cover info from track</span>

     <span class="c1">// Create a phpQuery document</span>
     <span class="nx">phpQuery</span><span class="o">::</span><span class="na">newDocument</span><span class="p">(</span><span class="nv">$html</span><span class="p">);</span>

     <span class="c1">// Get the meta tag og:image using phpQuery</span>
     <span class="nv">$image_url</span> <span class="o">=</span> <span class="nx">pq</span><span class="p">(</span><span class="s1">&#39;meta[property=og:image&#39;</span><span class="p">)</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">);</span>

     <span class="c1">// Optionally, get the thumbnail instead of the larger image, by simply substituting the relevant part of the URL</span>
     <span class="nv">$image_url</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;image&#39;</span><span class="p">,</span> <span class="s1">&#39;thumb&#39;</span><span class="p">,</span> <span class="nv">$image_url</span><span class="p">);</span>

     <span class="k">return</span> <span class="nv">$image_url</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

Usage is extremely simple:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$track_id</span> <span class="o">=</span> <span class="s1">&#39;5fpizYGbi5IQoEraj6FP0R&#39;</span><span class="p">;</span>

<span class="nv">$image_url</span> <span class="o">=</span> <span class="nx">get_track_artwork</span><span class="p">(</span><span class="nv">$track_id</span><span class="p">);</span></code></pre></div>

Of course if you’re starting with a Spotify URI, you'll need to extract the ID, like so:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$track_uri</span> <span class="o">=</span> <span class="s1">&#39;spotify:track:5fpizYGbi5IQoEraj6FP0R&#39;</span><span class="p">;</span>
<span class="nv">$track_id</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$track_uri</span><span class="p">,</span> <span class="nb">strripos</span><span class="p">(</span><span class="nv">$track_uri</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">));</span></code></pre></div>

Again, please use this function with caution – and cache the results!

</description>
      <pubDate>Fri, 14 Dec 2012 14:49:53 +0000</pubDate>
      <dc:date>2012-12-14T14:49:53+00:00</dc:date>
    </item>
    <item>
      <title>Writing a Book in Markdown</title>
      <link>http://www.lukaswhite.com/blog/post/2013/writing-book-markdown</link>
      <description>I'm writing my first book at the moment. Lately I've been doing all my writing in Markdown, but ultimately i'll need an alternative format. For word processing, such as it is, I tend to use Open Office - so really I wanted to be able to write in Markdown, but convert to Open Office (or indeed, any of a variety of formats). For one thing, it's nice to get an idea of the number of pages, which my Markown editor just can't do. Also, I prefer to work with separate files for each chapter - but I'm not entirely sure what order the chapters will end up in. So, what I really wanted was a quick way to do two things - concatenate all my chapters, and then convert the lot to Open Office format.

My solution to this is in two parts.

First, a shell script to concatenate the files. It's important it's fairly easy to rearrange chapters, so the format of this was crucial.

Second, the conversion. For this I turned to [Pandoc](http://johnmacfarlane.net/pandoc/), a small command-line utility which supports a huge raft of formats including Open Office, Markdown, Microsoft Word, HTML, ePub, LaTeX and so on.

So without further ado, here's my shell script. Easy to reorganise, and does everything I need in minutes.

<div class="highlight"><pre><code class="language-bash" data-lang="bash">cat a_chapter_about_rabbits.md <span class="se">\</span>
a_chapter_about_giraffes.md <span class="se">\</span>
all_about_ocelots.md <span class="se">\</span>
lets_talk_about_elephants.md <span class="se">\</span>
wrapping_up.md <span class="se">\</span>
<span class="p">&amp;</span>gt<span class="p">;</span> concatenated.md

pandoc concatenated.md -o book.odt
rm concatenated.md</code></pre></div>

Now, when I add a new chapter I simply need to pop the filename in the appropriate place, I can see the chapter listing clearly, and rearranging is a basic cut &amp; paste job. Simple!

(Note: the book's not _really_ about ocelots.)

</description>
      <pubDate>Thu, 28 Feb 2013 12:04:46 +0000</pubDate>
      <dc:date>2013-02-28T12:04:46+00:00</dc:date>
    </item>
    <item>
      <title>Gift Certificates in Drupal Commerce</title>
      <link>http://www.lukaswhite.com/blog/post/2013/gift-certificates-drupal-commerce</link>
      <description>There isn't really an out-of-the-box solution for gift certificates in [Drupal Commerce](http://www.drupalcommerce.org/); there's no module (at time of writing) you can simply download, enable and forget about. Being Drupal, there are many ways to skin a cat, so to speak, so in this post I'm going to outline how I got them working on a site I built.

</description>
      <pubDate>Sat, 04 May 2013 10:08:47 +0100</pubDate>
      <dc:date>2013-05-04T10:08:47+01:00</dc:date>
    </item>
    <item>
      <title>Website Re-Development</title>
      <link>http://www.lukaswhite.com/blog/post/2013/website-redevelopment</link>
      <description>Until very recently, this website was powered by Drupal.  Now although Drupal's great in a whole raft of situations, there are times when either it's overkill for something small, or just doesn't fit into one's workflow.  I came to realise that both of these applied to this site, so when it came to re-developing, I decided to abandon Drupal for the site altogether.

In the end, I decided to rebuild the site using Jekyll, along with a few other tools along the way.  

This post explains the motivations behind the decision, what I did next and some of the challenges I faced along the way.


###The Need for Re-development

There were several aspects that made re-developing my site something of a priority.

First, it wasn't mobile-friendly.  I may have been able to get away with that some years ago when I first drafted the site, but now that's just not acceptable.  After weighing the pros and cons of a responsive vs a separate mobile site, I decided on the former - and the only way to do that would be to start the front end build again from scratch.

Secondly, the site was running Drupal 6.  When I first built the site, Seven was in the offing, but not yet secure or stable enough for production.  Staying with Drupal would have meant an upgrade, and moving between versions 6 and 7 isn't trivial.

Lastly, the structure of the site was no longer ideal.  My [work](/work/portfolio) of late has included [open-source development](/work/open-source) and [lots of writing](/work/writing), so a [portfolio](/work/portfolio) only told half the story.

###Other Factors

####Workflow

Though the entire site was content-managed, the vast majority of my time was spent on the blog - the rest rarely changed.  Although I had a WYSIWYG editor installed I was far more likely to use raw HTML, and often use the tools I use every day - such as Sublime Text - and then copying between applications, rather than editing in the browser.  As such, it made sense from a workflow point-of-view to switch to something that closer resembles my development process.

I've also become quite a fan of Markdown of late.

####Bloat

For such a simple site, there sure was a lot of it.  

####Performance

There were time when the site ran pretty slow.  Largely this was down to the fact that I have all sorts of projects running on the same box, and also because there have been times when the site has taken something of a hammering - particularly whe I release a new article.  I wanted my site to perform the best it possibly could, without throwing server resources at the problem.

###Curiosity

Then there was the final motivation - I wanted to try something a little different.  There's no doubt that moving sites from a CMS to static is quite &quot;cool&quot; right now; maybe there was an element of that, but it's also true that the vast majority of the projects I'm involved in use frameworks or CMS's, and I wanted to try stripping back the complexity of those, and try something new.  Enter Jekyll, which although I'd looked at I hadn't really used.

###What had to Go

In moving from a fully-featured CMS to a static site, there were a number of things that would have to go - or, at least, be re-thought.

####Comments

Most of my posts attracted some excellent comments.  Clearly comments are something that aren't supported with a static site, at least without using something like Disqus.

However, with comments you always have to weigh up the pros of inviting discussion and gaining useful insight, with the effort involved in fighting spam.  I used a number of the tools at my disposal to help the fight on my Drupal site - primarily, moderation and Mollom.  I deliberately opted against CAPTCHA - as well as being far from fool-proof, I personally find them a significant hinderance.  

Despite my best efforts, the sheer amount of spam - including a week of sustained attacks that had led me to disable comments anyway - made the decision to put aisde the lack of a commenting system in my decision to move to a static site.

####Dynamic Image Re-sizing

Drupal's image styles (formerly imagecache) enabled me to upload a single image for something, and have the CMS take care of any necessary resizing.  There are [solutions for Jekyll](https://github.com/zroger/jekyll-minimagick), but even then it became clear that this wasn't a priority.  I also found that images weren't always resized the way I wanted them, and setting the compression is something that varies according to the image - and can only, I feel, be done by eye.  As such, losing this particular piece of functionality wasn't a big deal.

####Other Features

Of course Drupal provides many, many other features - either in core, via third-party modules, or by writing your own.  But I didn't *need* anything else.  I didn't *need* to be able to switch themes, to translate content, dynamic views or a hundred and one content types.  In fact, the sheer amount of unused functionality just added to the bloat.


###Other Advantages

One of the problems with a CMS is that as well as having to keep a backup - preferably in source control! - of all your code, there's also the database to worry about.  Indeed, with Drupal in addition to all the content being stored in the database, so too is much of the configuration (fortunately, Drupal 8 is changing this).  So that's two things to worry about, and with a database that means scheduled backups.  It's also much more complex to use version control with SQl sumps.  With a static site, there are no such problems - the whole thing; templates, code, and content is in one place and can be safely stored away in Git.





I've reworked the design slightly, replaced all the CSS and underlying HTML, and tidied up some of the visuals.  






###Source-code Highlighting

I use a lot of code samples in my posts, so source-code highlighting was a must.  Fortunately, Jekyll supports it by default using [Pygments](http://pygments.org/).

That said, there are a few steps required to make it work - the actual steps will depend on your system, and what you already have installed.

First, I had to install Pygments.  I installed on a Mac, so I already had Python installed, so I simply had to do this:

    sudo easy_install pygments

I also needed to ensure it was installed in my `_config.yml` file:

    pygments: true

The next thing I needed to do was create the css file:

    pygmentize -S default -f html &gt; css/pygments.css


And the step I forgot for a while, leading to much unecessary head-scratching - including the CSS in my layout!

At first, I struggled to get PHP code to highlight.  Turns out that by default, Pygments expects `&lt;?php` tags, unless you use the `startinline` option:

    %}}

Using Pygments - which formats source-code using CSS - solved one of the problems I had with my existing site, which was that the Javascript-based solution I was using was a little tempremental.  It also caused problems on mobile - though to be fair, I do find code quite difficult to read on mobiles regardless.  Using CSS to format the code seems much more natural than using a plugin.


###Portfolio

To use CMS parlance, Jekyll only supports one &quot;content type&quot;, and that's blog posts.  In my old site, my portfolio was comprised of a &quot;project&quot; content type, and I felt it would be easier to manage if I had something similar in this version of the site.


https://github.com/flatterline/jekyll-plugins

###Blocks

http://stackoverflow.com/questions/8772404/jekyll-not-interpreting-markdown

In `_plugins/unident.rb`:

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">module</span> <span class="nn">UnindentFilter</span>
    <span class="k">def</span> <span class="nf">unindent</span> <span class="n">input</span>
      <span class="n">input</span><span class="o">.</span><span class="n">lstrip</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">UnindentFilter</span></code></pre></div>

https://github.com/agelber/jekyll-rss


###Twitter Feed

Another challenge I faced was the Twitter feed, that appears on the front page of the site.

Because it was a static site and this involved dynamic content, it made sense to explore a client-side solutio; i.e., Javascript.  

Only a few months previous, this would have been a doddle - however, my website redevelopment came shortly after Twitter finally retired the old REST API - requiring developers to use OAuth, even if all you want to do is fetch a public timeline.

The problem with OAuth, of course, is that your credentials need to be kept well out of view - which makes things difficult if you're building a client-side application.

My solution - as suggested by [this excellent article](http://mikerogers.io/2013/02/25/how-use-twitter-oauth-1-1-javascriptjquery.html) - was to build a simple proxy.

As such, instead of fetching the data from Twitter, my JQuery code simply needed to pass the required URL to my proxy, and then that would be responsible for making the call to Twitter, authenticating using OAuth.

The next challenge was to format the tweets.  For this I found [Remy Sharp's twitterlib](https://github.com/remy/twitterlib).  However, the format method was unsuitable, because it added avatars - unecessary for one person's timeline, I feel - and the format didn't fit the site.  Instead, I used the method `twitterlib.ify.clean`.  Here's the code in full:

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span>
<span class="p">{</span>
	<span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/twitter-proxy.php?url=&#39;</span><span class="o">+</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s1">&#39;statuses/user_timeline.json?screen_name=lukaswhite&amp;amp;count=2&amp;amp;include_rts=false&amp;amp;exclude_replies=true&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span>
		<span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s1">&#39;&amp;lt;ul&amp;gt;&#39;</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">len</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span> 
			<span class="c1">//html += twitterlib.expandLinks(d[i]);</span>
			<span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39;&amp;lt;li&amp;gt;&#39;</span> <span class="o">+</span> <span class="nx">twitterlib</span><span class="p">.</span><span class="nx">ify</span><span class="p">.</span><span class="nx">clean</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">text</span><span class="p">);</span>
			<span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39; &amp;lt;span class=&amp;quot;created&amp;quot;&amp;gt;&amp;amp;mdash; &#39;</span> <span class="o">+</span> <span class="nx">twitterlib</span><span class="p">.</span><span class="nx">time</span><span class="p">.</span><span class="nx">datetime</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">created_at</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&amp;lt;/span&amp;gt;&#39;</span><span class="p">;</span> <span class="c1">// + &#39;&amp;quot;&amp;gt;&#39; + twitterlib.time.relative(d[i].created_at) + &#39;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&#39;;</span>
			<span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39;&amp;lt;/li&amp;gt;&#39;</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39;&amp;lt;/ul&amp;gt;&#39;</span><span class="p">;</span>
		<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tweets&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
	<span class="p">});</span>
<span class="p">});</span></code></pre></div>


<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;date&#39;</span>

<span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">module</span> <span class="nn">NiceDate</span>
    <span class="k">def</span> <span class="nf">nice_date</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
      <span class="n">d</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="o">%</span><span class="n">e</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">ordinalize</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span> <span class="o">+</span> <span class="n">input</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span> <span class="o">%</span><span class="n">B</span><span class="p">,</span> <span class="o">%</span><span class="n">Y</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;)</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">ordinalize</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
      <span class="k">if</span> <span class="p">(</span><span class="mi">11</span><span class="o">.</span><span class="n">.</span><span class="mi">13</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span>
        <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="c1">#{number}&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt;&amp;quot;</span>
      <span class="k">else</span>
        <span class="k">case</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">10</span>
          <span class="k">when</span> <span class="mi">1</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="c1">#{number}&amp;lt;sup&amp;gt;st&amp;lt;/sup&amp;gt;&amp;quot;</span>
          <span class="k">when</span> <span class="mi">2</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="c1">#{number}&amp;lt;sup&amp;gt;nd&amp;lt;/sup&amp;gt;&amp;quot;</span>
          <span class="k">when</span> <span class="mi">3</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="c1">#{number}&amp;lt;sup&amp;gt;rd&amp;lt;/sup&amp;gt;&amp;quot;</span>
          <span class="k">else</span>    <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="c1">#{number}&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt;&amp;quot;</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span><span class="p">(</span><span class="no">Jekyll</span><span class="o">::</span><span class="no">NiceDate</span><span class="p">)</span></code></pre></div>


http://truongtx.me/2013/01/09/display-liquid-code-in-jekyll/

</description>
      <pubDate>Sun, 11 Aug 2013 13:04:46 +0100</pubDate>
      <dc:date>2013-08-11T13:04:46+01:00</dc:date>
    </item>
    <item>
      <title>A Bash Script for New projects</title>
      <link>http://www.lukaswhite.com/blog/post/2013/bash-script-new-projects</link>
      <description>Whenever I start a new web project, the initial steps are pretty much the same:

- Create a new folder, in my case in `/var/www`
- Change the ownership of the new folder
- Come up with a new hostname, e.g. `myproject.local`
- Create an entry in `etc/hosts`
- Create an Apache virtual host for it
- Create a new database
- Create a new Git repository
- Intialise the Git repository
- Create a new project in Sublime

Not particularly hard, but pretty repetitive. And if something's repetitive, chances are it can be scripted!

So here's what I came up with:

<script src='https://gist.github.com/9311300.js?file='></script><noscript><pre><code></code></pre></noscript>

A few notes:

- This script is designed for a Mac, but it should work on any OS provided you check / modify things like the paths
- Don't forget to set your MySQL / Bitbucket credentials at the top of the file
- You'll probably need to use `sudo` to run this
- The script asks for a &quot;friendly&quot; name, e.g. &quot;My Awesome Project&quot;. It then generates a slug, e.g. `my-awesome-project`.  The hostname becomes `my-awesome-project.local`, the directory gets named `my-awesome-project`, as does the Git repo, and the database ends up being called `myawesomeproject`. You can always modify the script to alter this behaviour
- You might want to expand the script to create a database user too, perhaps with a random password
- It creates a Git repository using Bitbucket's REST API. You may wish to alter the behaviour - in which case [consult the documentation](https://confluence.atlassian.com/display/BITBUCKET/Use+the+Bitbucket+REST+APIs) - or you might be able to add Github support, which isn't something I tried.

</description>
      <pubDate>Thu, 22 Aug 2013 13:04:46 +0100</pubDate>
      <dc:date>2013-08-22T13:04:46+01:00</dc:date>
    </item>
    <item>
      <title>Recent Sitepoint Articles</title>
      <link>http://www.lukaswhite.com/blog/post/2013/recent-sitepoint-articles</link>
      <description>I haven't written anything here for quite a while, but I have been writing. I've had quite a number of articles published on Sitepoint (and before the re-brand, the PHPMaster site).

</description>
      <pubDate>Sun, 06 Oct 2013 20:46:41 +0100</pubDate>
      <dc:date>2013-10-06T20:46:41+01:00</dc:date>
    </item>
    <item>
      <title>Laravel Pagination with Foundation</title>
      <link>http://www.lukaswhite.com/blog/post/2013/laravel-pagination-with-foundation</link>
      <description>Laravel 4's pagination functionality supports Twitter Bootstrap out-of-the-box.  However, if you prefer to use Zurb's [Foundation](http://foundation.zurb.com/), here is the code you'll need.  Just drop the presenter class somewhere where your autoloader will pick it up, pick one (or both) of the template files, and configure your `app/config/view.php` file to point to the appropriate template file.

First, the presenter class: 

<script src='https://gist.github.com/7942142.js?file=FoundationPresenter.php'></script><noscript><pre><code></code></pre></noscript>

The simple template file:

<script src='https://gist.github.com/7942142.js?file=simple.php'></script><noscript><pre><code></code></pre></noscript>

The slider template file:

<script src='https://gist.github.com/7942142.js?file=slider.php'></script><noscript><pre><code></code></pre></noscript>

</description>
      <pubDate>Thu, 19 Dec 2013 12:04:46 +0000</pubDate>
      <dc:date>2013-12-19T12:04:46+00:00</dc:date>
    </item>
    <item>
      <title>Running Laravel Artisan Commands from your Admin Dashboard / GUI</title>
      <link>http://www.lukaswhite.com/blog/post/2014/running-laravel-artisan-commands-your-admin-dashboard-gui</link>
      <description>Sometimes you may wish to run Artisan commands from your admin dashboard
/ application, without using the command line. Perhaps you don't have
access to the command line (in which case perhaps it's time to switch
hosting!), or more likely perhaps you want to manually run tasks right
from your application. Here's a quick guide to how you might set that
up.

### Running a command

To run a command programmatically, you simply do this:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nx">Artisan</span><span class="o">::</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;my-command&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">());</span></code></pre></div>

The first argument is the name of the command, the second your options,
which I'm going to ignore for brevity.

It's probably more useful if you can get a hold of the command's output;
you can do this by passing a third argument, which should be a class
that implements `Symfony\Component\Console\Output\OutputInterface`.
Perhaps the most useful of these classes is `StreamOutput`. So, for
example, you can write the output to a file:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$stream</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;log.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
<span class="nx">Artisan</span><span class="o">::</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;my-command&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="k">new</span> <span class="nx">StreamOutput</span><span class="p">(</span><span class="nv">$stream</span><span class="p">));</span></code></pre></div>

Or `php://output`:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nv">$stream</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;php://output&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
<span class="nx">Artisan</span><span class="o">::</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;my-command&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="k">new</span> <span class="nx">StreamOutput</span><span class="p">(</span><span class="nv">$stream</span><span class="p">));</span></code></pre></div>

Armed with this, we can proceed with the admin interface.

### The Admin Interface

Now to set up a route for the main admin page.

The first thing we probably want to do is set up a white-list of
commands you're permitted to run from the back-end:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="c1">// @file app/config/commands.php</span>
<span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="sd">/**</span>
<span class="sd">    * An array of commands which are available to run from the admin area.</span>
<span class="sd">    */</span>
    <span class="s1">&#39;whitelist&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;my-command&#39;</span><span class="p">,</span>
        <span class="s1">&#39;another-command&#39;</span><span class="p">,</span>
        <span class="s1">&#39;do-something-else&#39;</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">);</span></code></pre></div>

You'll notice the white-list just contains the commands' names; we can
get the descriptions as defined in the Command classes themselves.

Here's an example route:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\StreamOutput</span><span class="p">,</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Descriptor\ApplicationDescription</span><span class="p">;</span>

<span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/commands&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
<span class="p">{</span>   
        <span class="nv">$app</span> <span class="o">=</span> <span class="nx">App</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">);</span>

        <span class="nv">$app</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">loadDeferredProviders</span><span class="p">();</span>

        <span class="nv">$console_app</span> <span class="o">=</span> <span class="nx">\Illuminate\Console\Application</span><span class="o">::</span><span class="na">start</span><span class="p">(</span><span class="nv">$app</span><span class="p">);</span>

        <span class="nv">$description</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApplicationDescription</span><span class="p">(</span><span class="nv">$console_app</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$description</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getCommands</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$command</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getName</span><span class="p">(),</span> <span class="nx">Config</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;commands.whitelist&#39;</span><span class="p">)))</span> <span class="p">{</span>
                <span class="nv">$commands</span><span class="p">[</span><span class="nv">$command</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getName</span><span class="p">()]</span> <span class="o">=</span> <span class="nv">$command</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getDescription</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;commands.index&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;commands&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nv">$commands</span><span class="p">));</span>
<span class="p">});</span></code></pre></div>

This code explained:

1. We get a reference to the Laravel application from the IoC container
2. We load deferred providers - without this, we won't have access to
    our own commands
3. We grab a Console application
4. We get an instance of
    `Symfony\Component\Console\Descriptor\ApplicationDescription`, which
    will provide us with information about the commands
5. We take a subset of the commands - cross-referencing them against
    the white-list - and pass their names and descriptions to the view.

Now the view:

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>html<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>ul id=<span class="ni">&amp;quot;</span>commands<span class="ni">&amp;quot;&amp;gt;</span>
    @foreach ($commands as $name =<span class="ni">&amp;gt;</span> $description)
    <span class="ni">&amp;lt;</span>li<span class="ni">&amp;gt;&amp;lt;</span>a href=<span class="ni">&amp;quot;</span>/commands/run/<span class="ni">&amp;quot;&amp;gt;&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>/li<span class="ni">&amp;gt;</span>
    @endforeach
<span class="ni">&amp;lt;</span>/ul<span class="ni">&amp;gt;</span>

<span class="ni">&amp;lt;</span>div id=<span class="ni">&amp;quot;</span>output<span class="ni">&amp;quot;&amp;gt;</span>

<span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>/html<span class="ni">&amp;gt;</span></code></pre></div>

This is simply a list of links and an empty DIV to hold the output,
which we'll populate (by running the appropriate command) via AJAX.

The Javascript:

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#commands li a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#output&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&amp;lt;p&amp;gt;Running...&amp;lt;/p&amp;gt;&#39;</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#output&#39;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">));</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">});</span></code></pre></div>

Finally, the route to actually run the command:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/commands/run/{command}&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$command</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">print</span> <span class="s1">&#39;&amp;lt;pre&amp;gt;&#39;</span><span class="p">;</span>
        <span class="nv">$stream</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;php://output&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
        <span class="nx">Artisan</span><span class="o">::</span><span class="na">call</span><span class="p">(</span><span class="nv">$command</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="k">new</span> <span class="nx">StreamOutput</span><span class="p">(</span><span class="nv">$stream</span><span class="p">));</span>
        <span class="k">print</span> <span class="s1">&#39;&amp;lt;/pre&amp;gt;&#39;</span><span class="p">;</span>
        <span class="k">print</span> <span class="s1">&#39;&amp;lt;p&amp;gt;DONE&amp;lt;/p&amp;gt;&#39;</span><span class="p">;</span>
<span class="p">});</span></code></pre></div>

It's a simplistic example, with some crucial omissions - arguments /
options and security - but it's a starting point.











</description>
      <pubDate>Wed, 22 Jan 2014 12:04:46 +0000</pubDate>
      <dc:date>2014-01-22T12:04:46+00:00</dc:date>
    </item>
    <item>
      <title>Incorporating Gravatar into the Signin (or Registration) Process</title>
      <link>http://www.lukaswhite.com/blog/post/2014/incorporating-gravatar-signin-or-registration-process</link>
      <description>I signed up for an online service the other day ([Commando.io](https://commando.io/&quot;)), and they had a really nice little interaction during the signup and signin processes. As soon as you enter your email address, it automatically displays your [Gravatar](http://en.gravatar.com). Nice little touch.

So, I thought I'd write a quick tutorial on how to replicate the effect.

There is a [demo here](http://demos.lukaswhite.com/gravatar-signin).

###Getting Started

For simplicity, I based the form on one of the [example templates](http://getbootstrap.com/examples/signin) for the [Bootstrap framework](http://getbootstrap.com).

It's pretty straightforward to download the Bootstrap framework using [Bower](http://bower.io):

`bower install bootstrap`

Because Bootstrap's JS - not that it's used for this tutorial - has JQuery has a dependency, Bower will download it automatically - so no need to download it separately.

Next up, a little additional markup for the form:

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>html<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>form id=<span class="ni">&amp;quot;</span>login<span class="ni">&amp;quot;</span> class=<span class="ni">&amp;quot;</span>form-signin<span class="ni">&amp;quot;</span> role=<span class="ni">&amp;quot;</span>form<span class="ni">&amp;quot;&amp;gt;</span>
        <span class="ni">&amp;lt;</span>h2 class=<span class="ni">&amp;quot;</span>form-signin-heading<span class="ni">&amp;quot;&amp;gt;</span>Please sign in<span class="ni">&amp;lt;</span>/h2<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>div class=<span class="ni">&amp;quot;</span>avatar-holder<span class="ni">&amp;quot;&amp;gt;</span>
          <span class="ni">&amp;lt;</span>img src=<span class="ni">&amp;quot;</span>./img/avatar.png<span class="ni">&amp;quot;</span> width=<span class="ni">&amp;quot;</span>64<span class="ni">&amp;quot;</span> height=<span class="ni">&amp;quot;</span>64<span class="ni">&amp;quot;</span> id=<span class="ni">&amp;quot;</span>avatar<span class="ni">&amp;quot;</span> /<span class="ni">&amp;gt;</span>
        <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>!-- ...rest of the form goes here... --<span class="ni">&amp;gt;</span>
<span class="ni">&amp;lt;</span>/html<span class="ni">&amp;gt;</span></code></pre></div>

A few CSS styles - I've just put them in the HEAD for simplicity:

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.avatar-holder</span> <span class="p">{</span>
	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
	<span class="k">padding</span><span class="o">:</span> <span class="m">1em</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#avatar</span> <span class="p">{</span>
	<span class="k">width</span><span class="o">:</span> <span class="m">64px</span><span class="p">;</span>
	<span class="k">height</span><span class="o">:</span> <span class="m">64px</span><span class="p">;</span>
	<span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span>
	<span class="k">border</span><span class="o">:</span> <span class="k">solid</span> <span class="m">2px</span> <span class="m">#ddd</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.note</span> <span class="p">{</span>
	<span class="k">margin-top</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
	<span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>        
<span class="p">}</span>
<span class="nc">.note</span> <span class="nt">p</span> <span class="p">{</span>
	<span class="k">font-size</span><span class="o">:</span> <span class="m">0.8em</span><span class="p">;</span>
	<span class="k">color</span><span class="o">:</span> <span class="m">#666</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

That's the basic structure ready to go.

###How to Use Gravatar

Generating a Gravatar is really easy. You simply create an image tag and point it to a specific URL, which you construct as follows:

&lt;code style=&quot;font-size:1.5em&quot;&gt;http://www.gravatar.com/avatar/HASH?s=64&lt;/code&gt;

HASH is an MD5 hash of the user's email address, which should first be converted to lowercase. There are a few additional parameters you can use, which are [detailed in the documentation](http://en.gravatar.com/site/implement/images), but I'm just setting the size here - indicated by the attribute _s_. In this case, I want the Gravatar to be 64px x 64px, to match the image.

###Implementation

The first thing to note is that Javascript doesn't support MD5 hashing out-the-box. Fortunately there are libraries for that, such as [this one](https://github.com/blueimp/JavaScript-MD5).

Again, this can be installed using Bower:

`bower install blueimp-md5`

Now the JQuery:

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>

    <span class="c1">// React to the email field (on the login form) having been filled out</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form#login input[name=&amp;quot;email&amp;quot;]&#39;</span><span class="p">).</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>

        <span class="c1">// Assuming an email has been provided...</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">email</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>     

            <span class="c1">// Construct the Gravatar URL</span>
            <span class="kd">var</span> <span class="nx">gravatar_url</span> <span class="o">=</span> <span class="s1">&#39;http://www.gravatar.com/avatar/&#39;</span> <span class="o">+</span> <span class="nx">md5</span><span class="p">(</span><span class="nx">email</span><span class="p">.</span><span class="nx">trim</span><span class="p">().</span><span class="nx">toLowerCase</span><span class="p">())</span> <span class="o">+</span> <span class="s1">&#39;?s=64&#39;</span><span class="p">;</span>

            <span class="c1">// Set the source of the avatar image.</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img#avatar&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">gravatar_url</span><span class="p">);</span>
        <span class="p">}</span>
        
    <span class="p">});</span>

<span class="p">});</span></code></pre></div>

Most of this should be relatively straightforward. Because we want to grab the avatar after the user has entered their email address, it's set to fire on the `blur` event on the email input. After a quick check to ensure a value has been entered (we might also want to validate it here), we build the URL to the Gravatar. First we take the email address - the value of the input - trim any erroneous whitespace, convert it to lowercase, then obtain its MD5 hash. This is then used to generate the URL, which is set as the `src` attribute of the avatar image. Pretty simple effect, but it adds a little something to your forms.&lt;/p&gt;

[Demo](http://demos.lukaswhite.com/gravatar-signin/) / [source code](https://github.com/lukaswhite/Gravatar-Signin)

</description>
      <pubDate>Wed, 26 Feb 2014 12:04:46 +0000</pubDate>
      <dc:date>2014-02-26T12:04:46+00:00</dc:date>
    </item>
    <item>
      <title>Working with UK Postcodes in PHP</title>
      <link>http://www.lukaswhite.com/blog/post/2014/working-uk-postcodes-php</link>
      <description>I've created a [simple package](https://github.com/lukaswhite/uk-postcodes) for working with UK Postcodes.  It contains two principle components:

1. A simple class to encapsulate UK Postcodes
2. A wrapper to [this web service](http://www.uk-postcodes.com/api)

The postcode class can be used for:

- validating postcodes
- formatting them, e.g. &quot;sw1a2aa&quot; -&gt; &quot;SW1A 2AA&quot;
- getting the outcode (the first part of a postcode; e.g. M1, SW1A, GL9)

The meat and bones of the package, though, is the web service.  Most notably, it allows you to take a postcode, and find out its latitude and longitude.  Here's an example of how it's used:

<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">// Create the client</span>
<span class="x">$client = new Lukaswhite\UkPostcodes\UkPostcodesClient();       </span>

<span class="x">// Call the web service</span>
<span class="x">$postcode = $client-&amp;gt;postcode(&#39;sw1a2aa&#39;);</span>

<span class="x">print get_class($postcode);</span>
<span class="x">// Lukaswhite\UkPostcodes\UkPostcode</span>

<span class="x">print $postcode-&amp;gt;formatted();</span>
<span class="x">// SW1A 2AA</span>

<span class="x">print get_class($postcode-&amp;gt;getCoordinate());</span>
<span class="x">// League\Geotools\Coordinate\Coordinate</span>

<span class="x">print $postcode-&amp;gt;getCoordinate()-&amp;gt;getLatitude();</span>
<span class="x">// 51.503539898876</span>

<span class="x">print $postcode-&amp;gt;getCoordinate()-&amp;gt;getLongitude();</span>
<span class="x">// -0.12768084037293</span>

<span class="x">print get_class($postcode-&amp;gt;getCoordinate()-&amp;gt;getEllipsoid());</span>
<span class="x">// League\Geotools\Coordinate\Ellipsoid </span>

<span class="x">print $postcode-&amp;gt;council-&amp;gt;title;</span>
<span class="x">// City of Westminster</span>

<span class="x">print $postcode-&amp;gt;council-&amp;gt;code;</span>
<span class="x">// E09000033</span>

<span class="x">print $postcode-&amp;gt;council-&amp;gt;uri;</span>
<span class="x">// http://statistics.data.gov.uk/id/statistical-geography/E09000033</span>

<span class="x">print $postcode-&amp;gt;ward-&amp;gt;title;</span>
<span class="x">// St. James&#39;s</span>

<span class="x">print $postcode-&amp;gt;constituency-&amp;gt;title;</span>
<span class="x">// Cities of London and Westminster</span></code></pre></div>

Because the UkPostcode class utilises [Geotools](http://geotools-php.org/), you can do all sorts of geo-related stuff with the postcodes (using `getCoordinate()`) such as finding the distance between a point and a postcode, or between two postcodes. 

The source is [on Github](https://github.com/lukaswhite/uk-postcodes).


</description>
      <pubDate>Thu, 06 Mar 2014 09:04:46 +0000</pubDate>
      <dc:date>2014-03-06T09:04:46+00:00</dc:date>
    </item>
    <item>
      <title>Legal Pages in Laravel</title>
      <link>http://www.lukaswhite.com/blog/post/2014/legal-pages-laravel</link>
      <description>Most sites have pages for Terms and Conditions, a Privacy policy and / or a page about cookies.  Presumably they are usually tucked away in a CMS somewhere, or as static HTML - no doubt copied &amp; pasted verbatim from the Internet.  Whether the CMS is the natural place for them remains to be seen, and certainly if a site doesn't have content as such then supporting those sorts of pages introduces new problems - is the content simply dropped into a view somewhere?

To help solve this problem - in Laravel 4, specifically - I've created a simple package called [Legalpages](https://github.com/lukaswhite/legalpages). The idea behind it is simple - you install it, enter a few pieces of information about your business or organisation in a configuration file - and done, your site now has Terms and Conditions, Privacy and cookie pages. I've used some boilerplate documents, which get tailored according to the information you provide, but you can customise them if you wish - they wind up in your `app/storage` directory in Markdown format for easy editing.

The sample documents are UK-focussed (in fact, more England &amp; Wales since some of the laws in question differ slightly up in Scotland) - but if there's enough demand, I'll look at expanding the package to support other countries. Of course you can still use the package, just modify the Markdown files.

The code is [on Github](https://github.com/lukaswhite/legalpages), or you can install it using Composer:

`&quot;lukaswhite/legalpages&quot; : &quot;dev-master&quot;`

Check out [the README](https://github.com/lukaswhite/legalpages/blob/master/README.md) for more detailed instructions.

</description>
      <pubDate>Thu, 13 Mar 2014 09:04:46 +0000</pubDate>
      <dc:date>2014-03-13T09:04:46+00:00</dc:date>
    </item>
    <item>
      <title>More Articles and Tutorials</title>
      <link>http://www.lukaswhite.com/blog/post/2014/more-articles-and-tutorials</link>
      <description>I've had a few more articles and tutorials published in the past few days, with a number to come later this month. Here's a quick run-down of the articles I've had published in the past couple of weeks.

####[Abstract File Systems with Flysystem, Sitepoint](http://www.sitepoint.com/abstract-file-systems-flysystem)

An introduction to Flysystem, a PHP library which provides developers with a layer of abstraction over file storage systems including standard local files, online services such as Dropbox and Cloud Files and remote storage mechanisms such as FTP.

####[Introduction to JadePHP, Sitepoint](http://www.sitepoint.com/introduction-jadephp/)

Jade is a templating language often found in the JavaScript world. Heavily influenced by Haml, it provides an extremely concise way of defining your XML-based markup. JadePHP brings it to PHP, and in this article I take it for a test-drive.

####[Getting Started with Assetic, Sitepoint](http://www.sitepoint.com/getting-started-assetic/)

Assetic is an asset management package for PHP. It helps organise static assets - such as stylesheets, javascript and images - and perform actions on them such as compilation, compression and concatenation. In this article, I give a rundown of how to use it.

###Coming Up

Here's a sneak preview of what's coming up.

I've written a huge four-part tutorial on using *Apache SOLR* along with *Solarium*, a PHP library which allows you to use SOLR as if it were a native search implementation. It's due sometime around the end of April.

[Kirby](http://getkirby.com/) is a very simple, file-based CMS written in PHP. I've written a comprehensive review of it, which will be published in the next couple of weeks.

I've also written extensively on [Piwik](http://piwik.org/) which is a self-hosted, open-sourced alternative to Google Analytics. If you've been concerned recently with Google and privacy, or simply want to take control of your analytics data, then it's well worth a look.

I've also been doing some writing about [Node](http://nodejs.org), which I've been working with a lot lately. One upcoming article is about using JSON web tokens to secure an application, using examples written in Node with Express and Backbone for the server-side and client-side components respectively.  I've also written an article on using streams in Node. Both articles should be published in the next few weeks.

Finally, I've also written a thorough review of [Brackets](http://brackets.io/), which is an open-sourced editor originally by Adobe.

Keep an eye out for these if they're of any interest - I'll be continually updating [this page](/work/writing) with the details.

</description>
      <pubDate>Sat, 12 Apr 2014 10:04:46 +0100</pubDate>
      <dc:date>2014-04-12T10:04:46+01:00</dc:date>
    </item>
    <item>
      <title>Building Applications with Backbone and Laravel: JST</title>
      <link>http://www.lukaswhite.com/blog/post/2014/building-applications-backbone-and-laravel-jst</link>
      <description>You might well be used to developing Backbone views like this:

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">MyApp</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">SomeView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>    
  <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s1">&#39;&amp;lt;ul&amp;gt;&amp;lt;% _.each(items, function(item){ %&amp;gt;&amp;lt;li&amp;gt;&amp;lt;%= item %&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;% }); %&amp;gt;&amp;lt;/ul&amp;gt;&#39;</span><span class="p">),</span>    
  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#some-element&#39;</span><span class="p">,</span></code></pre></div>

  
This is all fine and well for simple structures, but can quickly get unwieldly if you're building markup of any significant size or complexity. It can also lead to all sorts of issues around readability.

One alternative is to put more complex templates into separate HTML files:

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// file: folder/template.html</span>

<span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">ul</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span>
 <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">){</span> <span class="o">%&amp;</span><span class="nx">gt</span><span class="p">;</span>
 <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">li</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%=</span> <span class="nx">item</span> <span class="o">%&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/li&amp;gt;</span>
 <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">%</span> <span class="p">});</span> <span class="o">%&amp;</span><span class="nx">gt</span><span class="p">;</span>
<span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/ul&amp;gt;</span></code></pre></div>


Each time you want to render a template, you can load in the template via AJAX or use RequireJS's [text plugin](http://requirejs.org/docs/api.html#text). Great for development, but pretty atrocious for performance, as it'll fire off untold numbers of HTTP requests.

Using [JST](http://ricostacruz.com/backbone-patterns/#jst_templates) allows you to develop templates in this way - spreading templates across separate files, organised into a logical hierarchy - but &quot;collapse&quot; them into variables which are available via a single JS file. This file can then be minified, or incorporated into a larger Javascript file using, for example, the RequireJS optimiser or Google Closure Compiler.

Such a file looks a little like this:

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// file: jst.js</span>

<span class="kd">var</span> <span class="nx">JST</span> <span class="o">=</span> <span class="nx">JST</span> <span class="o">||</span> <span class="p">{};</span>
<span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;app/templates/folder/template.html&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s1">&#39;&amp;lt;ul&amp;gt;&amp;lt;% _.each(items, function(item){ %&amp;gt;&amp;lt;li&amp;gt;&amp;lt;%= item %&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;% }); %&amp;gt;&amp;lt;/ul&amp;gt;&#39;</span><span class="p">);</span>
<span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;app/templates/folder/template2.html&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;app/templates/folder2/template.html&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="c1">// etc...</span></code></pre></div>


##JST and Laravel

If your Backbone application's back-end uses Laravel, I've [written a package](https://github.com/lukaswhite/laravel-jst) to generate such a file.

###Usage

Generate your JST file by entering the following command in your terminal:

`php artisan jst:generate`


Or alternatively, you can have it &quot;watch&quot; your templates directory (and any sub-directories) for changes, and recompile the file for you:

`php artisan jst:watch`


Back to your Backbone application:

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// file: namespace.js</span>
 
<span class="nx">define</span><span class="p">([</span>
    <span class="c1">// Libs</span>
    <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">jquery</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span>
    <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">use</span><span class="o">!</span><span class="nx">underscore</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span>
    <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">use</span><span class="o">!</span><span class="nx">backbone</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span>
<span class="p">],</span>

<span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
 <span class="c1">// Put application wide code here</span>

 <span class="k">return</span> <span class="p">{</span>
  <span class="c1">// This is useful when developing if you don&#39;t want to use a</span>
  <span class="c1">// build process every time you change a template.</span>
  <span class="c1">//</span>
  <span class="c1">// Delete if you are using a different template loading method.</span>
  <span class="nx">fetchTemplate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">JST</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">JST</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">JST</span> <span class="o">||</span> <span class="p">{};</span>
   <span class="kd">var</span> <span class="nx">def</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>

   <span class="c1">// Should be an instant synchronous way of getting the template, if it</span>
   <span class="c1">// exists in the JST object.</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">JST</span><span class="p">[</span><span class="nx">path</span><span class="p">])</span> <span class="p">{</span>        
    <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">done</span><span class="p">))</span> <span class="p">{</span>
     <span class="nx">done</span><span class="p">(</span><span class="nx">JST</span><span class="p">[</span><span class="nx">path</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">def</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">JST</span><span class="p">[</span><span class="nx">path</span><span class="p">]);</span>
   <span class="p">}</span>

   <span class="c1">// Fetch it asynchronously if not available from JST, ensure that</span>
   <span class="c1">// template requests are never cached and prevent global ajax event</span>
   <span class="c1">// handlers from firing.</span>
   <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="nx">url</span><span class="o">:</span> <span class="nx">path</span><span class="p">,</span>
    <span class="nx">type</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">get</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span>
    <span class="nx">dataType</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">text</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span>
    <span class="nx">cache</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nx">global</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>

    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">JST</span><span class="p">[</span><span class="nx">path</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">contents</span><span class="p">);</span>

     <span class="c1">// Set the global JST cache and return the template</span>
     <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">done</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">done</span><span class="p">(</span><span class="nx">JST</span><span class="p">[</span><span class="nx">path</span><span class="p">]);</span>
     <span class="p">}</span>

     <span class="c1">// Resolve the template deferred</span>
     <span class="nx">def</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">JST</span><span class="p">[</span><span class="nx">path</span><span class="p">]);</span>
    <span class="p">}</span>
   <span class="p">});</span>

   <span class="c1">// Ensure a normalized return value (Promise)</span>
   <span class="k">return</span> <span class="nx">def</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span>
  <span class="p">},</span>

 <span class="p">};</span>
<span class="p">});</span></code></pre></div>


As you can see, this provides a method which tries to load a template from a global variable called JST, but if that's not available - i.e., during development - then it loads it in as an HTML file using AJAX.

Now you can create a view like this, to take advantage of it:

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">MyApp</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">SomeView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
 <span class="nx">template</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">app</span><span class="o">/</span><span class="nx">templates</span><span class="o">/</span><span class="nx">folder</span><span class="o">/</span><span class="nx">someview</span><span class="p">.</span><span class="nx">html</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span>        
    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>      
  <span class="nx">namespace</span><span class="p">.</span><span class="nx">fetchTemplate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tmpl</span><span class="p">)</span> <span class="p">{</span>        
   <span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">tmpl</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">view</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span> <span class="p">});</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">done</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">done</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
   <span class="p">}</span>  
  <span class="p">});</span>
 <span class="p">}</span>
<span class="c1">// …</span></code></pre></div>

 
## Using it Outside of Laravel

There's no reason why this code can't be re-purposed to work outside of Laravel - perhaps I'll get a chance at some point, but feel free to have a stab at it. All the dependencies are managed via Composer.

</description>
      <pubDate>Sun, 13 Apr 2014 10:04:46 +0100</pubDate>
      <dc:date>2014-04-13T10:04:46+01:00</dc:date>
    </item>
    <item>
      <title>Installing Elasticsearch on Laravel Homestead</title>
      <link>http://www.lukaswhite.com/blog/post/2014/installing-elasticsearch-laravel-homestead</link>
      <description>Here's a gist I created, showing how to install Elasticsearch on a Laravel Homestead box with just a few lines. Hope you find it useful.

&lt;script src=&quot;https://gist.github.com/lukaswhite/c50a6cf82ce0b7aa6b2a.js&quot;&gt;&lt;/script&gt;

</description>
      <pubDate>Sun, 03 Aug 2014 10:04:46 +0100</pubDate>
      <dc:date>2014-08-03T10:04:46+01:00</dc:date>
    </item>
    <item>
      <title>Easy Jekyll Deployment with Grunt and Git</title>
      <link>http://www.lukaswhite.com/blog/post/2014/easy-jekyll-deployment-grunt-git</link>
      <description>I've recently re-built this site using [Jekyll](http://jekyllrb.com/), for reasons I'll go into in another blog post. I wanted to make deploying changes really, really easy. In this post, I'm going to detail my approach.

###Hosting

Jekyll plays nicely with Github Pages. However, I haven't taken advantage of it, for two reasons. The first is that I have a number of unsupported plugins, so I can't take advantage of their automatic Jekyll building process. That's not necessarily an impediment to using Github Pages, since there are workarounds. A bigger issue is that you currently cannot use HTTPS with a custom domain, which is suddenly really important as far as search rankings go, following [Google's recent announcement](http://googlewebmastercentral.blogspot.co.uk/2014/08/https-as-ranking-signal.html).

One of the great things about using Jekyll is that because it's all static files, hosting requirements are nominal. So, I decided to keep my [Digital Ocean](https://www.digitalocean.com/?refcode=4bb9d458bcc0) droplet (disclaimer: that's an affiliate link). It's pretty low-spec, but if it comes to it, resizing a Droplet is a piece of cake.

So that's the hosting, now I'll go through the steps involved in my deployment process.

###Overview of the Deployment Steps

####Grunt

I'm using [Grunt](http://gruntjs.com/) to perform a number of tasks:

* Compiling some SASS files
* Concatenating the CSS
* Minifying all my CSS

I've configured a default task for these, so I simply need to run `grunt`. There are no Javascript-related tasks, such as linting or minifying, simply because there isn't any Javascript.

I've also added a task to optimize all my images, but haven't included it in my default Grunt configuration, simply because it takes a while - I just run it as and when I need to.

####Jekyll

The next step is of course to run `jekyll build`. This regenerates the website in the `_site` directory. I've set up Git so that this directory is included in the repository. This is contrary to a lot of setups, which deliberately ignore the built version of the site - but since I'm building it locally, it's necessary to include it.

####Git

The next step in my deployment process is to commit any changes to Git. Then, I'm pushing those changes to the master branch on Bitbucket, as well as the &quot;live&quot; site by using a Git remote. I'll go through that part of the process shortly.

###The Deployment Process

The first thing I did was add my SSH key to the Droplet, so I wouldn't need to enter a password everytime I deploy. This is really easy:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> ~
cat .ssh/id_rsa.pub <span class="p">|</span> ssh me@example.com <span class="s1">&#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&#39;</span></code></pre></div>

The next step was to create a new directory on the remote server:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /var/www
mkdir example.com</code></pre></div>

Then I created a new, empty Git repository:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd </span>example.com
git init</code></pre></div>

I set the `receive.denyCurrent` Git setting to `ignore` for the repository - here's the complete file (`.git/config`) for demonstration:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>core<span class="o">]</span>
	<span class="nv">repositoryformatversion</span> <span class="o">=</span> 0
	<span class="nv">filemode</span> <span class="o">=</span> <span class="nb">true</span>
<span class="nb">	</span><span class="nv">bare</span> <span class="o">=</span> <span class="nb">false</span>
<span class="nb">	</span><span class="nv">logallrefupdates</span> <span class="o">=</span> <span class="nb">true</span>
<span class="o">[</span>receive<span class="o">]</span>
	<span class="nv">denyCurrentBranch</span> <span class="o">=</span> ignore</code></pre></div>

Next, I configured Apache to point to `/var/www/example.com/_site`. 

Then I added a remote to my **local** Git repository:

<div class="highlight"><pre><code class="language-bash" data-lang="bash">git remote add production ssh://me@example.com/var/www/example.com</code></pre></div>

Next, I created a post-receive hook on the web server:

<div class="highlight"><pre><code class="language-bash" data-lang="bash">nano /var/www/example.com/.git/hooks/post-receive</code></pre></div>

Here are the contents of that file:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/sh</span>
<span class="nb">cd</span> ..
<span class="nv">GIT_DIR</span><span class="o">=</span><span class="s1">&#39;.git&#39;</span>
<span class="nv">GIT_WORK_TREE</span><span class="o">=</span>/var/www/example.com git checkout -f
<span class="nb">umask </span><span class="m">002</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> git reset --hard</code></pre></div>

Essentially, this synchronises the remote server (i.e. my web host)'s copy of the Git repository which holds the site, whenever I do a `git push`.

Note that this file needs to be made executable:

<div class="highlight"><pre><code class="language-bash" data-lang="bash">chmod +x /var/www/example.com/.git/hooks/post-receive</code></pre></div>

Next, my local deployment script. I created a file named simply `deploy` with the following contents:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
grunt
jekyll build
git add . -A
git commit -am <span class="p">&amp;</span>quot<span class="p">;</span>Updated website<span class="p">&amp;</span>quot<span class="p">;</span>
git push production master</code></pre></div>

This does the following:

1. Runs my Grunt tasks (compiling SASS, concatenating and then minifying the CSS)
2. Builds the site
3. Adds any newly created files to Git. The -A flag (all) also ensures any deleted files are removed from Git (see [this post](http://www.geekgumbo.com/2010/05/16/removing-deleted-files-from-your-git-working-directory/) for further explanation)
4. Commits the changes to Git
5. Pushes up to the remote server, where the Git hook takes care of updating the &quot;live site&quot;

With all this in place, all I need to do to deploy my site is this:

<div class="highlight"><pre><code class="language-bash" data-lang="bash">./deploy</code></pre></div>

###Extending for Multiple Environments

If you have multiple environments - for example production and staging - you can expand this script to ask which one to push to. Here's the modified script:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="nv">prompt</span><span class="o">=</span><span class="p">&amp;</span>quot<span class="p">;</span>Pick an option: <span class="p">&amp;</span>quot<span class="p">;</span>
<span class="nv">options</span><span class="o">=(</span><span class="p">&amp;</span>quot<span class="p">;</span>Production<span class="p">&amp;</span>quot<span class="p">;</span> <span class="p">&amp;</span>quot<span class="p">;</span>Staging<span class="p">&amp;</span>quot<span class="p">;</span><span class="o">)</span>

<span class="nv">PS3</span><span class="o">=</span><span class="p">&amp;</span>quot<span class="p">;</span><span class="nv">$prompt</span> <span class="p">&amp;</span>quot<span class="p">;</span>
<span class="k">select</span> opt in <span class="p">&amp;</span>quot<span class="p">;</span><span class="k">${</span><span class="nv">options</span><span class="p">[@]</span><span class="k">}</span><span class="p">&amp;</span>quot<span class="p">;</span> <span class="p">&amp;</span>quot<span class="p">;</span>Quit<span class="p">&amp;</span>quot<span class="p">;;</span> <span class="k">do</span> 

    <span class="k">case</span> <span class="p">&amp;</span>quot<span class="p">;</span><span class="nv">$REPLY</span><span class="p">&amp;</span>quot<span class="p">;</span> in

    <span class="m">1</span> <span class="o">)</span> <span class="nv">env</span><span class="o">=</span><span class="p">&amp;</span>quot<span class="p">;</span>production<span class="p">&amp;</span>quot<span class="p">;;;</span>
    <span class="m">2</span> <span class="o">)</span> <span class="nv">env</span><span class="o">=</span><span class="p">&amp;</span>quot<span class="p">;</span>staging<span class="p">&amp;</span>quot<span class="p">;;;</span>

    <span class="k">$((</span> <span class="k">${#</span><span class="nv">options</span><span class="p">[@]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span> <span class="k">))</span> <span class="o">)</span> <span class="nb">echo</span> <span class="p">&amp;</span>quot<span class="p">;</span>Exiting.<span class="p">&amp;</span>quot<span class="p">;;</span> <span class="nb">exit</span><span class="p">;;</span>
    *<span class="o">)</span> <span class="nb">echo</span> <span class="p">&amp;</span>quot<span class="p">;</span>Invalid option. Try another one.<span class="p">&amp;</span>quot<span class="p">;;</span><span class="k">continue</span><span class="p">;;</span>

    <span class="k">esac</span>
    <span class="nb">break</span>

<span class="k">done</span>

<span class="nb">echo</span> <span class="p">&amp;</span>quot<span class="p">;</span>Pushing to <span class="nv">$env</span><span class="p">&amp;</span>quot<span class="p">;</span>

grunt
jekyll build
git add . -A
git commit -am <span class="p">&amp;</span>quot<span class="p">;</span>Updated website<span class="p">&amp;</span>quot<span class="p">;</span>
git push <span class="nv">$env</span> master</code></pre></div>

Now when you run it, you get the following:

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="p">&amp;</span>gt<span class="p">;</span> ./deploy
<span class="p">&amp;</span>gt<span class="p">;</span> 1<span class="o">)</span> Production
<span class="p">&amp;</span>gt<span class="p">;</span> 2<span class="o">)</span> Staging
<span class="p">&amp;</span>gt<span class="p">;</span> 3<span class="o">)</span> Quit
<span class="p">&amp;</span>gt<span class="p">;</span> Pick an option:  1
<span class="p">&amp;</span>gt<span class="p">;</span> Pushing to production</code></pre></div>

That's it - deploying is now a piece of cake.

</description>
      <pubDate>Fri, 12 Sep 2014 10:04:46 +0100</pubDate>
      <dc:date>2014-09-12T10:04:46+01:00</dc:date>
    </item>
    <dc:date>2014-09-12T10:04:46+01:00</dc:date>
  </channel>
</rss>